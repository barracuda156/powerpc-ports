From cf7cd69c023265ceb783cc605d93fd4e7ee41e86 Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Sat, 31 Aug 2024 04:16:22 +0800
Subject: [PATCH 18/20] xpr/xprFrame.c: fix build with gcc

---
 hw/xquartz/X11Application.m |  2 ++
 hw/xquartz/xpr/xprFrame.c   | 39 +++++++++++++++++++++++++++++++++++++
 2 files changed, 41 insertions(+)

diff --git a/hw/xquartz/X11Application.m b/hw/xquartz/X11Application.m
index 40507250b..944cd43d8 100644
--- a/hw/xquartz/X11Application.m
+++ b/hw/xquartz/X11Application.m
@@ -58,6 +58,8 @@
 extern int
 xpbproxy_run(void);
 
+#define DEFAULTS_FILE X11LIBDIR "/X11/xserver/Xquartz.plist"
+
 #ifndef XSERVER_VERSION
 #define XSERVER_VERSION "?"
 #endif
diff --git a/hw/xquartz/xpr/xprFrame.c b/hw/xquartz/xpr/xprFrame.c
index 57d16d42f..0926ca9f0 100644
--- a/hw/xquartz/xpr/xprFrame.c
+++ b/hw/xquartz/xpr/xprFrame.c
@@ -43,7 +43,11 @@
 #include "windowstr.h"
 #include "quartz.h"
 
+#ifdef __clang__
 #include <dispatch/dispatch.h>
+#else
+#include <pthread.h>
+#endif
 
 #define DEFINE_ATOM_HELPER(func, atom_name)                      \
     static Atom func(void) {                                       \
@@ -62,7 +66,11 @@ DEFINE_ATOM_HELPER(xa_native_window_id, "_NATIVE_WINDOW_ID")
 static x_hash_table * window_hash;
 
 /* Need to guard window_hash since xprIsX11Window can be called from any thread. */
+#if HAVE_LIBDISPATCH
 static dispatch_queue_t window_hash_serial_q;
+#else
+static pthread_rwlock_t window_hash_rwlock;
+#endif
 
 /* Prototypes for static functions */
 static Bool
@@ -197,9 +205,15 @@ xprCreateFrame(RootlessWindowPtr pFrame, ScreenPtr pScreen,
         return FALSE;
     }
 
+#ifdef __clang__
     dispatch_async(window_hash_serial_q, ^ {
                        x_hash_table_insert(window_hash, pFrame->wid, pFrame);
                    });
+#else
+    pthread_rwlock_wrlock(&window_hash_rwlock);
+    x_hash_table_insert(window_hash, pFrame->wid, pFrame);
+    pthread_rwlock_unlock(&window_hash_rwlock);
+#endif
 
     xprSetNativeProperty(pFrame);
 
@@ -214,9 +228,15 @@ xprDestroyFrame(RootlessFrameID wid)
 {
     xp_error err;
 
+#ifdef __clang__
     dispatch_async(window_hash_serial_q, ^ {
                        x_hash_table_remove(window_hash, wid);
                    });
+#else
+    pthread_rwlock_wrlock(&window_hash_rwlock);
+    x_hash_table_remove(window_hash, wid);
+    pthread_rwlock_unlock(&window_hash_rwlock);
+#endif
 
     err = xp_destroy_window(x_cvt_vptr_to_uint(wid));
     if (err != Success)
@@ -269,7 +289,9 @@ xprRestackFrame(RootlessFrameID wid, RootlessFrameID nextWid)
 {
     xp_window_changes wc;
     unsigned int mask = XP_STACKING;
+#ifdef __clang__
     __block
+#endif
     RootlessWindowRec * winRec;
 
     /* Stack frame below nextWid it if it exists, or raise
@@ -284,9 +306,15 @@ xprRestackFrame(RootlessFrameID wid, RootlessFrameID nextWid)
         wc.sibling = x_cvt_vptr_to_uint(nextWid);
     }
 
+#ifdef __clang__
     dispatch_sync(window_hash_serial_q, ^ {
                       winRec = x_hash_table_lookup(window_hash, wid, NULL);
                   });
+#else
+    pthread_rwlock_rdlock(&window_hash_rwlock);
+    winRec = x_hash_table_lookup(window_hash, wid, NULL);
+    pthread_rwlock_unlock(&window_hash_rwlock);
+#endif
 
     if (winRec) {
         if (XQuartzIsRootless)
@@ -477,9 +505,13 @@ xprInit(ScreenPtr pScreen)
     rootless_CopyWindow_threshold = xp_scroll_area_threshold;
 
     assert((window_hash = x_hash_table_new(NULL, NULL, NULL, NULL)));
+#ifdef __clang__
     assert((window_hash_serial_q =
                 dispatch_queue_create(BUNDLE_ID_PREFIX ".X11.xpr_window_hash",
                                       NULL)));
+#else
+    assert(0 == pthread_rwlock_init(&window_hash_rwlock, NULL));
+#endif
 
     return TRUE;
 }
@@ -491,12 +523,19 @@ xprInit(ScreenPtr pScreen)
 WindowPtr
 xprGetXWindow(xp_window_id wid)
 {
+#ifdef __clang__
     RootlessWindowRec *winRec __block;
     dispatch_sync(window_hash_serial_q, ^ {
                       winRec =
                           x_hash_table_lookup(window_hash,
                                               x_cvt_uint_to_vptr(wid), NULL);
                   });
+#else
+    RootlessWindowRec *winRec;
+    pthread_rwlock_rdlock(&window_hash_rwlock);
+    winRec = x_hash_table_lookup(window_hash, x_cvt_uint_to_vptr(wid), NULL);
+    pthread_rwlock_unlock(&window_hash_rwlock);
+#endif
 
     return winRec != NULL ? winRec->win : NULL;
 }
-- 
2.46.0

