From fa82c1cebb005955b0e7d31308d7fbe75a094e9f Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <vital.had@gmail.com>
Date: Fri, 30 Aug 2024 19:26:59 +0800
Subject: [PATCH 12/12] X11*: restore working code

---
 hw/xquartz/NSUserDefaults+XQuartzDefaults.h |  47 ---
 hw/xquartz/NSUserDefaults+XQuartzDefaults.m | 110 -----
 hw/xquartz/X11Application.h                 |   2 +-
 hw/xquartz/X11Application.m                 | 431 ++++++++++++++++++--
 hw/xquartz/X11Controller.m                  | 186 +++++----
 hw/xquartz/bundle/Xquartz.plist             |  27 ++
 hw/xquartz/meson.build                      |   1 -
 hw/xquartz/quartz.c                         |  12 +-
 8 files changed, 527 insertions(+), 289 deletions(-)
 delete mode 100644 hw/xquartz/NSUserDefaults+XQuartzDefaults.h
 delete mode 100644 hw/xquartz/NSUserDefaults+XQuartzDefaults.m
 create mode 100644 hw/xquartz/bundle/Xquartz.plist

diff --git a/hw/xquartz/NSUserDefaults+XQuartzDefaults.h b/hw/xquartz/NSUserDefaults+XQuartzDefaults.h
deleted file mode 100644
index b8fc4a631..000000000
--- a/hw/xquartz/NSUserDefaults+XQuartzDefaults.h
+++ /dev/null
@@ -1,47 +0,0 @@
-//
-//  NSUserDefaults+XQuartzDefaults.h
-//  XQuartz
-//
-//  Created by Jeremy Huddleston Sequoia on 2021.02.19.
-//  Copyright (c) 2021 Apple Inc. All rights reserved.
-//
-
-#import <Foundation/Foundation.h>
-
-extern NSString * const XQuartzPrefKeyAppsMenu;
-extern NSString * const XQuartzPrefKeyFakeButtons;
-extern NSString * const XQuartzPrefKeyFakeButton2;
-extern NSString * const XQuartzPrefKeyFakeButton3;
-extern NSString * const XQuartzPrefKeyKeyEquivs;
-extern NSString * const XQuartzPrefKeyFullscreenHotkeys;
-extern NSString * const XQuartzPrefKeyFullscreenMenu;
-extern NSString * const XQuartzPrefKeySyncKeymap;
-extern NSString * const XQuartzPrefKeyDepth;
-extern NSString * const XQuartzPrefKeyNoAuth;
-extern NSString * const XQuartzPrefKeyNoTCP;
-extern NSString * const XQuartzPrefKeyDoneXinitCheck;
-extern NSString * const XQuartzPrefKeyNoQuitAlert;
-extern NSString * const XQuartzPrefKeyNoRANDRAlert;
-extern NSString * const XQuartzPrefKeyOptionSendsAlt;
-extern NSString * const XQuartzPrefKeyAppKitModifiers;
-extern NSString * const XQuartzPrefKeyWindowItemModifiers;
-extern NSString * const XQuartzPrefKeyRootless;
-extern NSString * const XQuartzPrefKeyRENDERExtension;
-extern NSString * const XQuartzPrefKeyTESTExtension;
-extern NSString * const XQuartzPrefKeyLoginShell;
-extern NSString * const XQuartzPrefKeyClickThrough;
-extern NSString * const XQuartzPrefKeyFocusFollowsMouse;
-extern NSString * const XQuartzPrefKeyFocusOnNewWindow;
-
-extern NSString * const XQuartzPrefKeyScrollInDeviceDirection;
-extern NSString * const XQuartzPrefKeySyncPasteboard;
-extern NSString * const XQuartzPrefKeySyncPasteboardToClipboard;
-extern NSString * const XQuartzPrefKeySyncPasteboardToPrimary;
-extern NSString * const XQuartzPrefKeySyncClipboardToPasteBoard;
-extern NSString * const XQuartzPrefKeySyncPrimaryOnSelect;
-
-@interface NSUserDefaults (XQuartzDefaults)
-
-+ (NSUserDefaults *)xquartzDefaults;
-
-@end
diff --git a/hw/xquartz/NSUserDefaults+XQuartzDefaults.m b/hw/xquartz/NSUserDefaults+XQuartzDefaults.m
deleted file mode 100644
index ddf04de68..000000000
--- a/hw/xquartz/NSUserDefaults+XQuartzDefaults.m
+++ /dev/null
@@ -1,110 +0,0 @@
-//
-//  NSUserDefaults+XQuartzDefaults.m
-//  XQuartz
-//
-//  Created by Jeremy Huddleston Sequoia on 2021.02.19.
-//  Copyright (c) 2021 Apple Inc. All rights reserved.
-//
-
-#import "NSUserDefaults+XQuartzDefaults.h"
-#import <dispatch/dispatch.h>
-
-NSString * const XQuartzPrefKeyAppsMenu = @"apps_menu";
-NSString * const XQuartzPrefKeyFakeButtons = @"enable_fake_buttons";
-NSString * const XQuartzPrefKeyFakeButton2 = @"fake_button2";
-NSString * const XQuartzPrefKeyFakeButton3 = @"fake_button3";
-NSString * const XQuartzPrefKeyKeyEquivs = @"enable_key_equivalents";
-NSString * const XQuartzPrefKeyFullscreenHotkeys = @"fullscreen_hotkeys";
-NSString * const XQuartzPrefKeyFullscreenMenu = @"fullscreen_menu";
-NSString * const XQuartzPrefKeySyncKeymap = @"sync_keymap";
-NSString * const XQuartzPrefKeyDepth = @"depth";
-NSString * const XQuartzPrefKeyNoAuth = @"no_auth";
-NSString * const XQuartzPrefKeyNoTCP = @"nolisten_tcp";
-NSString * const XQuartzPrefKeyDoneXinitCheck = @"done_xinit_check";
-NSString * const XQuartzPrefKeyNoQuitAlert = @"no_quit_alert";
-NSString * const XQuartzPrefKeyNoRANDRAlert = @"no_randr_alert";
-NSString * const XQuartzPrefKeyOptionSendsAlt = @"option_sends_alt";
-NSString * const XQuartzPrefKeyAppKitModifiers = @"appkit_modifiers";
-NSString * const XQuartzPrefKeyWindowItemModifiers = @"window_item_modifiers";
-NSString * const XQuartzPrefKeyRootless = @"rootless";
-NSString * const XQuartzPrefKeyRENDERExtension = @"enable_render_extension";
-NSString * const XQuartzPrefKeyTESTExtension = @"enable_test_extensions";
-NSString * const XQuartzPrefKeyLoginShell = @"login_shell";
-NSString * const XQuartzPrefKeyUpdateFeed = @"update_feed";
-NSString * const XQuartzPrefKeyClickThrough = @"wm_click_through";
-NSString * const XQuartzPrefKeyFocusFollowsMouse = @"wm_ffm";
-NSString * const XQuartzPrefKeyFocusOnNewWindow = @"wm_focus_on_new_window";
-
-NSString * const XQuartzPrefKeyScrollInDeviceDirection = @"scroll_in_device_direction";
-NSString * const XQuartzPrefKeySyncPasteboard = @"sync_pasteboard";
-NSString * const XQuartzPrefKeySyncPasteboardToClipboard = @"sync_pasteboard_to_clipboard";
-NSString * const XQuartzPrefKeySyncPasteboardToPrimary = @"sync_pasteboard_to_primary";
-NSString * const XQuartzPrefKeySyncClipboardToPasteBoard = @"sync_clipboard_to_pasteboard";
-NSString * const XQuartzPrefKeySyncPrimaryOnSelect = @"sync_primary_on_select";
-
-@implementation NSUserDefaults (XQuartzDefaults)
-
-+ (NSUserDefaults *)xquartzDefaults
-{
-    static dispatch_once_t once;
-    static NSUserDefaults *defaults;
-
-    dispatch_once(&once, ^{
-        NSString * const defaultsDomain = @(BUNDLE_ID_PREFIX ".X11");
-        NSString * const defaultDefaultsDomain = NSBundle.mainBundle.bundleIdentifier;
-        if ([defaultsDomain isEqualToString:defaultDefaultsDomain]) {
-            defaults = [NSUserDefaults.standardUserDefaults retain];
-        } else {
-            defaults = [[[NSUserDefaults alloc] initWithSuiteName:defaultsDomain] retain];
-        }
-
-        NSString *defaultWindowItemModifiers = @"command";
-        NSString * const defaultWindowItemModifiersLocalized = NSLocalizedString(@"window item modifiers", @"window item modifiers");
-        if (![defaultWindowItemModifiersLocalized isEqualToString:@"window item modifiers"]) {
-            defaultWindowItemModifiers = defaultWindowItemModifiersLocalized;
-        }
-
-        NSDictionary<NSString *, id> * const defaultDefaultsDict = @{
-            XQuartzPrefKeyFakeButtons : @(NO),
-            // XQuartzPrefKeyFakeButton2 nil default
-            // XQuartzPrefKeyFakeButton3 nil default
-            XQuartzPrefKeyKeyEquivs : @(YES),
-            XQuartzPrefKeyFullscreenHotkeys : @(NO),
-            XQuartzPrefKeyFullscreenMenu : @(NO),
-            XQuartzPrefKeySyncKeymap : @(NO),
-            XQuartzPrefKeyDepth : @(-1),
-            XQuartzPrefKeyNoAuth : @(NO),
-            XQuartzPrefKeyNoTCP : @(NO),
-            XQuartzPrefKeyDoneXinitCheck : @(NO),
-            XQuartzPrefKeyNoQuitAlert : @(NO),
-            XQuartzPrefKeyNoRANDRAlert : @(NO),
-            XQuartzPrefKeyOptionSendsAlt : @(NO),
-            // XQuartzPrefKeyAppKitModifiers nil default
-            XQuartzPrefKeyWindowItemModifiers : defaultWindowItemModifiers,
-            XQuartzPrefKeyRootless : @(YES),
-            XQuartzPrefKeyRENDERExtension : @(YES),
-            XQuartzPrefKeyTESTExtension : @(NO),
-            XQuartzPrefKeyLoginShell : @"/bin/sh",
-            XQuartzPrefKeyClickThrough : @(NO),
-            XQuartzPrefKeyFocusFollowsMouse : @(NO),
-            XQuartzPrefKeyFocusOnNewWindow : @(YES),
-
-            XQuartzPrefKeyScrollInDeviceDirection : @(NO),
-            XQuartzPrefKeySyncPasteboard : @(YES),
-            XQuartzPrefKeySyncPasteboardToClipboard : @(YES),
-            XQuartzPrefKeySyncPasteboardToPrimary : @(YES),
-            XQuartzPrefKeySyncClipboardToPasteBoard : @(YES),
-            XQuartzPrefKeySyncPrimaryOnSelect : @(NO),
-        };
-
-        [defaults registerDefaults:defaultDefaultsDict];
-
-        NSString * const systemDefaultsPlistPath = [@(XQUARTZ_DATA_DIR) stringByAppendingPathComponent:@"defaults.plist"];
-        NSDictionary <NSString *, id> * const systemDefaultsDict = [NSDictionary dictionaryWithContentsOfFile:systemDefaultsPlistPath];
-        [defaults registerDefaults:systemDefaultsDict];
-    });
-
-    return defaults;
-}
-
-@end
diff --git a/hw/xquartz/X11Application.h b/hw/xquartz/X11Application.h
index fe4b968d9..8d90df543 100644
--- a/hw/xquartz/X11Application.h
+++ b/hw/xquartz/X11Application.h
@@ -35,7 +35,7 @@
 
 #if __OBJC__
 
-#import "X11Controller.h"
+#include "X11Controller.h"
 
 @interface X11Application : NSApplication {
     X11Controller *_controller;
diff --git a/hw/xquartz/X11Application.m b/hw/xquartz/X11Application.m
index e9637ad2c..b99781956 100644
--- a/hw/xquartz/X11Application.m
+++ b/hw/xquartz/X11Application.m
@@ -35,7 +35,6 @@
 #endif
 
 #include "X11Application.h"
-#include "NSUserDefaults+XQuartzDefaults.h"
 
 #include "darwin.h"
 #include "quartz.h"
@@ -56,6 +55,8 @@
 extern int
 xpbproxy_run(void);
 
+#define DEFAULTS_FILE X11LIBDIR "/X11/xserver/Xquartz.plist"
+
 #ifndef XSERVER_VERSION
 #define XSERVER_VERSION "?"
 #endif
@@ -101,6 +102,8 @@ static BOOL bgMouseLocationUpdated = FALSE;
 
 X11Application *X11App;
 
+CFStringRef app_prefs_domain_cfstr = NULL;
+
 #define ALL_KEY_MASKS (NSShiftKeyMask | NSControlKeyMask | \
                        NSAlternateKeyMask | NSCommandKeyMask)
 
@@ -582,50 +585,406 @@ message_kit_thread(SEL selector, NSObject *arg)
     (void)[self.controller application:self openFile:cmd];
 }
 
+/* user preferences */
+
+/* Note that these functions only work for arrays whose elements
+   can be toll-free-bridged between NS and CF worlds. */
+
+static const void *
+cfretain(CFAllocatorRef a, const void *b)
+{
+    return CFRetain(b);
+}
+
+static void
+cfrelease(CFAllocatorRef a, const void *b)
+{
+    CFRelease(b);
+}
+
+CF_RETURNS_RETAINED
+static CFMutableArrayRef
+nsarray_to_cfarray(NSArray *in)
+{
+    CFMutableArrayRef out;
+    CFArrayCallBacks cb;
+    NSObject *ns;
+    const CFTypeRef *cf;
+    int i, count;
+
+    memset(&cb, 0, sizeof(cb));
+    cb.version = 0;
+    cb.retain = cfretain;
+    cb.release = cfrelease;
+
+    count = [in count];
+    out = CFArrayCreateMutable(NULL, count, &cb);
+
+    for (i = 0; i < count; i++) {
+        ns = [in objectAtIndex:i];
+
+        if ([ns isKindOfClass:[NSArray class]])
+            cf = (CFTypeRef)nsarray_to_cfarray((NSArray *)ns);
+        else
+            cf = CFRetain((CFTypeRef)ns);
+
+        CFArrayAppendValue(out, cf);
+        CFRelease(cf);
+    }
+
+    return out;
+}
+
+static NSMutableArray *
+cfarray_to_nsarray(CFArrayRef in)
 
 - (void) read_defaults
 {
-    NSUserDefaults * const defaults = NSUserDefaults.xquartzDefaults;
+    NSMutableArray *out;
+    const CFTypeRef *cf;
+    NSObject *ns;
+    int i, count;
 
-    XQuartzRootlessDefault = [defaults boolForKey:XQuartzPrefKeyRootless];
-    XQuartzFullscreenMenu = [defaults boolForKey:XQuartzPrefKeyFullscreenMenu];
-    XQuartzFullscreenDisableHotkeys = ![defaults boolForKey:XQuartzPrefKeyFullscreenHotkeys];
+    count = CFArrayGetCount(in);
+    out = [[NSMutableArray alloc] initWithCapacity:count];
 
-    darwinFakeButtons = [defaults boolForKey:XQuartzPrefKeyFakeButtons];
-    XQuartzOptionSendsAlt = [defaults boolForKey:XQuartzPrefKeyOptionSendsAlt];
+    for (i = 0; i < count; i++) {
+        cf = CFArrayGetValueAtIndex(in, i);
 
-    if (darwinFakeButtons) {
-        NSString * const fake2 = [defaults stringForKey:XQuartzPrefKeyFakeButton2];
-        if (fake2) {
-            darwinFakeMouse2Mask = DarwinParseModifierList(fake2.UTF8String, TRUE);
+        if (CFGetTypeID(cf) == CFArrayGetTypeID())
+            ns = cfarray_to_nsarray((CFArrayRef)cf);
+        else
+            ns = [(id) cf retain];
+
+        [out addObject:ns];
+        [ns release];
+    }
+
+    return out;
+}
+
+- (CFPropertyListRef) prefs_get_copy:(NSString *)key
+{
+    CFPropertyListRef value;
+
+    value = CFPreferencesCopyAppValue((CFStringRef)key,
+                                      app_prefs_domain_cfstr);
+
+    if (value == NULL) {
+        static CFDictionaryRef defaults;
+
+        if (defaults == NULL) {
+            CFStringRef error = NULL;
+            CFDataRef data;
+            CFURLRef url;
+            SInt32 error_code;
+
+            url = (CFURLCreateFromFileSystemRepresentation
+                       (NULL, (unsigned char *)DEFAULTS_FILE,
+                       strlen(DEFAULTS_FILE), false));
+            if (CFURLCreateDataAndPropertiesFromResource(NULL, url, &data,
+                                                         NULL, NULL,
+                                                         &error_code)) {
+                defaults = (CFPropertyListCreateFromXMLData
+                                (NULL, data,
+                                kCFPropertyListMutableContainersAndLeaves,
+                                &error));
+                if (error != NULL) CFRelease(error);
+                CFRelease(data);
+            }
+            CFRelease(url);
+
+            if (defaults != NULL) {
+                NSMutableArray *apps, *elt;
+                int count, i;
+                NSString *name, *nname;
+
+                /* Localize the names in the default apps menu. */
+
+                apps =
+                    [(NSDictionary *) defaults objectForKey:@PREFS_APPSMENU];
+                if (apps != nil) {
+                    count = [apps count];
+                    for (i = 0; i < count; i++) {
+                        elt = [apps objectAtIndex:i];
+                        if (elt != nil &&
+                            [elt isKindOfClass:[NSArray class]]) {
+                            name = [elt objectAtIndex:0];
+                            if (name != nil) {
+                                nname = NSLocalizedString(name, nil);
+                                if (nname != nil && nname != name)
+                                    [elt replaceObjectAtIndex:0 withObject:
+                                     nname];
+                            }
+                        }
+                    }
+                }
+            }
         }
 
-        NSString * const fake3 = [defaults stringForKey:XQuartzPrefKeyFakeButton3];
-        if (fake3) {
-            darwinFakeMouse3Mask = DarwinParseModifierList(fake3.UTF8String, TRUE);
+        if (defaults != NULL) value = CFDictionaryGetValue(defaults, key);
+        if (value != NULL) CFRetain(value);
+    }
+
+    return value;
+}
+
+- (int) prefs_get_integer:(NSString *)key default:(int)def
+{
+    CFPropertyListRef value;
+    int ret;
+
+    value = [self prefs_get_copy:key];
+
+    if (value != NULL && CFGetTypeID(value) == CFNumberGetTypeID())
+        CFNumberGetValue(value, kCFNumberIntType, &ret);
+    else if (value != NULL && CFGetTypeID(value) == CFStringGetTypeID())
+        ret = CFStringGetIntValue(value);
+    else
+        ret = def;
+
+    if (value != NULL) CFRelease(value);
+
+    return ret;
+}
+
+- (const char *) prefs_get_string:(NSString *)key default:(const char *)def
+{
+    CFPropertyListRef value;
+    const char *ret = NULL;
+
+    value = [self prefs_get_copy:key];
+
+    if (value != NULL && CFGetTypeID(value) == CFStringGetTypeID()) {
+        NSString *s = (NSString *)value;
+
+        ret = [s UTF8String];
+    }
+
+    if (value != NULL) CFRelease(value);
+
+    return ret != NULL ? ret : def;
+}
+
+- (NSURL *) prefs_copy_url:(NSString *)key default:(NSURL *)def
+{
+    CFPropertyListRef value;
+    NSURL *ret = NULL;
+
+    value = [self prefs_get_copy:key];
+
+    if (value != NULL && CFGetTypeID(value) == CFStringGetTypeID()) {
+        NSString *s = (NSString *)value;
+
+        ret = [NSURL URLWithString:s];
+        [ret retain];
+    }
+
+    if (value != NULL) CFRelease(value);
+
+    return ret != NULL ? ret : def;
+}
+
+- (float) prefs_get_float:(NSString *)key default:(float)def
+{
+    CFPropertyListRef value;
+    float ret = def;
+
+    value = [self prefs_get_copy:key];
+
+    if (value != NULL
+        && CFGetTypeID(value) == CFNumberGetTypeID()
+        && CFNumberIsFloatType(value))
+        CFNumberGetValue(value, kCFNumberFloatType, &ret);
+    else if (value != NULL && CFGetTypeID(value) == CFStringGetTypeID())
+        ret = CFStringGetDoubleValue(value);
+
+    if (value != NULL) CFRelease(value);
+
+    return ret;
+}
+
+- (int) prefs_get_boolean:(NSString *)key default:(int)def
+{
+    CFPropertyListRef value;
+    int ret = def;
+
+    value = [self prefs_get_copy:key];
+
+    if (value != NULL) {
+        if (CFGetTypeID(value) == CFNumberGetTypeID())
+            CFNumberGetValue(value, kCFNumberIntType, &ret);
+        else if (CFGetTypeID(value) == CFBooleanGetTypeID())
+            ret = CFBooleanGetValue(value);
+        else if (CFGetTypeID(value) == CFStringGetTypeID()) {
+            const char *tem = [(NSString *) value UTF8String];
+            if (strcasecmp(tem, "true") == 0 || strcasecmp(tem, "yes") == 0)
+                ret = YES;
+            else
+                ret = NO;
         }
+
+        CFRelease(value);
     }
+    return ret;
+}
+
+- (NSArray *) prefs_get_array:(NSString *)key
+{
+    NSArray *ret = nil;
+    CFPropertyListRef value;
+
+    value = [self prefs_get_copy:key];
+
+    if (value != NULL) {
+        if (CFGetTypeID(value) == CFArrayGetTypeID())
+            ret = [cfarray_to_nsarray (value)autorelease];
 
-    NSString * const appKitModifiers = [defaults stringForKey:XQuartzPrefKeyAppKitModifiers];
-    if (appKitModifiers) {
-        darwinAppKitModMask = DarwinParseModifierList(appKitModifiers.UTF8String, TRUE);
+        CFRelease(value);
     }
 
-    NSString * const windowItemModifiers = [defaults stringForKey:XQuartzPrefKeyWindowItemModifiers];
-    if (windowItemModifiers) {
-        windowItemModMask = DarwinParseModifierList(windowItemModifiers.UTF8String, FALSE);
+    return ret;
+}
+
+- (void) prefs_set_integer:(NSString *)key value:(int)value
+{
+    CFNumberRef x;
+
+    x = CFNumberCreate(NULL, kCFNumberIntType, &value);
+
+    CFPreferencesSetValue((CFStringRef)key, (CFTypeRef)x,
+                          app_prefs_domain_cfstr,
+                          kCFPreferencesCurrentUser,
+                          kCFPreferencesAnyHost);
+
+    CFRelease(x);
+}
+
+- (void) prefs_set_float:(NSString *)key value:(float)value
+{
+    CFNumberRef x;
+
+    x = CFNumberCreate(NULL, kCFNumberFloatType, &value);
+
+    CFPreferencesSetValue((CFStringRef)key, (CFTypeRef)x,
+                          app_prefs_domain_cfstr,
+                          kCFPreferencesCurrentUser,
+                          kCFPreferencesAnyHost);
+
+    CFRelease(x);
+}
+
+- (void) prefs_set_boolean:(NSString *)key value:(int)value
+{
+    CFPreferencesSetValue(
+        (CFStringRef)key,
+        (CFTypeRef)(value ? kCFBooleanTrue
+                    : kCFBooleanFalse),
+        app_prefs_domain_cfstr,
+        kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
+
+}
+
+- (void) prefs_set_array:(NSString *)key value:(NSArray *)value
+{
+    CFArrayRef cfarray;
+
+    cfarray = nsarray_to_cfarray(value);
+    CFPreferencesSetValue((CFStringRef)key,
+                          (CFTypeRef)cfarray,
+                          app_prefs_domain_cfstr,
+                          kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
+    CFRelease(cfarray);
+}
+
+- (void) prefs_set_string:(NSString *)key value:(NSString *)value
+{
+    CFPreferencesSetValue((CFStringRef)key, (CFTypeRef)value,
+                          app_prefs_domain_cfstr, kCFPreferencesCurrentUser,
+                          kCFPreferencesAnyHost);
+}
+
+- (void) prefs_synchronize
+{
+    CFPreferencesAppSynchronize(kCFPreferencesCurrentApplication);
+}
+
+- (void) read_defaults
+{
+    NSString *nsstr;
+    const char *tem;
+
+    XQuartzRootlessDefault = [self prefs_get_boolean:@PREFS_ROOTLESS
+                              default               :XQuartzRootlessDefault];
+    XQuartzFullscreenMenu = [self prefs_get_boolean:@PREFS_FULLSCREEN_MENU
+                             default               :XQuartzFullscreenMenu];
+    XQuartzFullscreenDisableHotkeys =
+        ![self prefs_get_boolean:@PREFS_FULLSCREEN_HOTKEYS
+          default               :!
+          XQuartzFullscreenDisableHotkeys];
+    darwinFakeButtons = [self prefs_get_boolean:@PREFS_FAKEBUTTONS
+                         default               :darwinFakeButtons];
+    XQuartzOptionSendsAlt = [self prefs_get_boolean:@PREFS_OPTION_SENDS_ALT
+                             default               :XQuartzOptionSendsAlt];
+
+    if (darwinFakeButtons) {
+        const char *fake2, *fake3;
+
+        fake2 = [self prefs_get_string:@PREFS_FAKE_BUTTON2 default:NULL];
+        fake3 = [self prefs_get_string:@PREFS_FAKE_BUTTON3 default:NULL];
+
+        if (fake2 != NULL) darwinFakeMouse2Mask = DarwinParseModifierList(
+                fake2, TRUE);
+        if (fake3 != NULL) darwinFakeMouse3Mask = DarwinParseModifierList(
+                fake3, TRUE);
+    }
+
+    tem = [self prefs_get_string:@PREFS_APPKIT_MODIFIERS default:NULL];
+    if (tem != NULL) darwinAppKitModMask = DarwinParseModifierList(tem, TRUE);
+
+    tem = [self prefs_get_string:@PREFS_WINDOW_ITEM_MODIFIERS default:NULL];
+    if (tem != NULL) {
+        windowItemModMask = DarwinParseModifierList(tem, FALSE);
+    }
+    else {
+        nsstr = NSLocalizedString(@"window item modifiers",
+                                  @"window item modifiers");
+        if (nsstr != NULL) {
+            tem = [nsstr UTF8String];
+            if ((tem != NULL) && strcmp(tem, "window item modifiers")) {
+                windowItemModMask = DarwinParseModifierList(tem, FALSE);
+            }
+        }
     }
 
-    XQuartzEnableKeyEquivalents = [defaults boolForKey:XQuartzPrefKeyKeyEquivs];
+    XQuartzEnableKeyEquivalents = [self prefs_get_boolean:@PREFS_KEYEQUIVS
+                                   default               :
+                                   XQuartzEnableKeyEquivalents];
 
-    darwinSyncKeymap = [defaults boolForKey:XQuartzPrefKeySyncKeymap];
+    darwinSyncKeymap = [self prefs_get_boolean:@PREFS_SYNC_KEYMAP
+                        default               :darwinSyncKeymap];
 
-    darwinDesiredDepth = [defaults integerForKey:XQuartzPrefKeyDepth];
+    darwinDesiredDepth = [self prefs_get_integer:@PREFS_DEPTH
+                          default               :darwinDesiredDepth];
 
-    noTestExtensions = ![defaults boolForKey:XQuartzPrefKeyTESTExtension];
-    noRenderExtension = ![defaults boolForKey:XQuartzPrefKeyRENDERExtension];
+    noTestExtensions = ![self prefs_get_boolean:@PREFS_TEST_EXTENSIONS
+                         default               :FALSE];
 
-    XQuartzScrollInDeviceDirection = [defaults boolForKey:XQuartzPrefKeyScrollInDeviceDirection];
+    noRenderExtension = ![self prefs_get_boolean:@PREFS_RENDER_EXTENSION
+                          default               :TRUE];
+
+    XQuartzScrollInDeviceDirection =
+        [self prefs_get_boolean:@PREFS_SCROLL_IN_DEV_DIRECTION
+         default               :
+         XQuartzScrollInDeviceDirection];
+
+#if XQUARTZ_SPARKLE
+    NSURL *url = [self prefs_copy_url:@PREFS_UPDATE_FEED default:nil];
+    if (url) {
+        [[SUUpdater sharedUpdater] setFeedURL:url];
+        [url release];
+    }
+#endif
 }
 
 /* This will end up at the end of the responder chain. */
@@ -799,9 +1158,8 @@ check_xinitrc(void)
 {
     char *tem, buf[1024];
     NSString *msg;
-    NSUserDefaults * const defaults = NSUserDefaults.xquartzDefaults;
 
-    if ([defaults boolForKey:XQuartzPrefKeyDoneXinitCheck])
+    if ([X11App prefs_get_boolean:@PREFS_DONE_XINIT_CHECK default:NO])
         return;
 
     tem = getenv("HOME");
@@ -835,7 +1193,8 @@ check_xinitrc(void)
     }
 
 done:
-    [defaults setBool:YES forKey:XQuartzPrefKeyDoneXinitCheck];
+    [X11App prefs_set_boolean:@PREFS_DONE_XINIT_CHECK value:YES];
+    [X11App prefs_synchronize];
 }
 
 static inline pthread_t
@@ -878,16 +1237,14 @@ X11ApplicationMain(int argc, char **argv, char **envp)
     X11App = (X11Application *)[X11Application sharedApplication];
     init_ports();
 
-    app_prefs_domain_cfstr =
-        (CFStringRef)[[NSBundle mainBundle] bundleIdentifier];
+        app_prefs_domain_cfstr = (CFStringRef)[[NSBundle mainBundle] bundleIdentifier];
 
-    if (app_prefs_domain_cfstr == NULL) {
-        ErrorF(
-            "X11ApplicationMain: Unable to determine bundle identifier.  Your installation of XQuartz may be broken.\n");
-        app_prefs_domain_cfstr = CFSTR(BUNDLE_ID_PREFIX ".X11");
-    }
+        if (app_prefs_domain_cfstr == NULL) {
+            ErrorF("X11ApplicationMain: Unable to determine bundle identifier. Your installation of XQuartz may be broken.\n");
+            app_prefs_domain_cfstr = CFSTR(BUNDLE_ID_PREFIX ".X11");
+        }
 
-    [NSApp read_defaults];
+        [NSApp read_defaults];
     [NSBundle loadNibNamed:@"main" owner:NSApp];
     [[NSNotificationCenter defaultCenter] addObserver:NSApp
                                              selector:@selector (became_key:)
diff --git a/hw/xquartz/X11Controller.m b/hw/xquartz/X11Controller.m
index e21aed0d3..1eaecd550 100644
--- a/hw/xquartz/X11Controller.m
+++ b/hw/xquartz/X11Controller.m
@@ -34,9 +34,8 @@
 #include <dix-config.h>
 #endif
 
-#import "X11Controller.h"
-#import "X11Application.h"
-#import "NSUserDefaults+XQuartzDefaults.h"
+#include "X11Controller.h"
+#include "X11Application.h"
 
 #include "opaque.h"
 #include "darwin.h"
@@ -79,15 +78,15 @@ extern char *bundle_id_prefix;
     /* Point X11Application at ourself. */
     xapp.controller = self;
 
-    NSUserDefaults * const defaults = NSUserDefaults.xquartzDefaults;
-    NSArray *appsMenu = [defaults arrayForKey:XQuartzPrefKeyAppsMenu];
-
-    if (appsMenu) {
-        int count = appsMenu.count;
+    array = [xapp prefs_get_array:@PREFS_APPSMENU];
+    if (array != nil) {
+        int count;
 
         /* convert from [TITLE1 COMMAND1 TITLE2 COMMAND2 ...]
            to [[TITLE1 COMMAND1] [TITLE2 COMMAND2] ...] format. */
-        if (count > 0 && ![appsMenu[0] isKindOfClass:NSArray.class]) {
+        count = [array count];
+        if (count > 0
+            && ![[array objectAtIndex:0] isKindOfClass:[NSArray class]]) {
             int i;
             NSMutableArray *copy, *sub;
 
@@ -95,24 +94,24 @@ extern char *bundle_id_prefix;
 
             for (i = 0; i < count / 2; i++) {
                 sub = [[NSMutableArray alloc] initWithCapacity:3];
-                [sub addObject:appsMenu[i * 2]];
-                [sub addObject:appsMenu[i * 2 + 1]];
+                [sub addObject:[array objectAtIndex:i * 2]];
+                [sub addObject:[array objectAtIndex:i * 2 + 1]];
                 [sub addObject:@""];
                 [copy addObject:sub];
                 [sub release];
             }
 
-            appsMenu = copy;
-            [defaults setObject:appsMenu forKey:XQuartzPrefKeyAppsMenu];
+            array = copy;
         }
 
-        [self set_apps_menu:appsMenu];
+        [self set_apps_menu:array];
     }
 
-    [NSNotificationCenter.defaultCenter addObserver:self
-                                           selector:@selector(apps_table_done:)
-                                               name:NSWindowWillCloseNotification
-                                             object:self.apps_table.window];
+    [[NSNotificationCenter defaultCenter]
+     addObserver: self
+        selector: @selector(apps_table_done:)
+            name: NSWindowWillCloseNotification
+          object: self.apps_table.window];
 }
 
 - (void) item_selected:sender
@@ -348,12 +347,9 @@ extern char *bundle_id_prefix;
     int stdout_pipe[2];
     int stderr_pipe[2];
 
-    NSUserDefaults * const defaults = NSUserDefaults.xquartzDefaults;
-    NSString * const shell = [defaults stringForKey:XQuartzPrefKeyLoginShell];
-
-    newargv[0] = shell.fileSystemRepresentation;
+    newargv[0] = [X11App prefs_get_string:@PREFS_LOGIN_SHELL default:"/bin/sh"];
     newargv[1] = "-c";
-    newargv[2] = filename.fileSystemRepresentation;
+    newargv[2] = [filename UTF8String];
     newargv[3] = NULL;
 
     s = getenv("DISPLAY");
@@ -499,8 +495,8 @@ extern char *bundle_id_prefix;
     [self remove_apps_menu];
     [self install_apps_menu:table_apps];
 
-    NSUserDefaults * const defaults = NSUserDefaults.xquartzDefaults;
-    [defaults setObject:table_apps forKey:XQuartzPrefKeyAppsMenu];
+    [NSApp prefs_set_array:@PREFS_APPSMENU value:table_apps];
+    [NSApp prefs_synchronize];
 
     [[apps_table window] orderOut:sender];
 
@@ -677,15 +673,15 @@ extern char *bundle_id_prefix;
 
 - (IBAction) enable_fullscreen_changed:sender
 {
-    XQuartzRootlessDefault = !self.enable_fullscreen.state;
+    XQuartzRootlessDefault = !self.enable_fullscreen.intValue;
 
     [self.enable_fullscreen_menu setEnabled:!XQuartzRootlessDefault];
     [self.enable_fullscreen_menu_text setTextColor:XQuartzRootlessDefault ? NSColor.disabledControlTextColor : NSColor.controlTextColor];
 
     DarwinSendDDXEvent(kXquartzSetRootless, 1, XQuartzRootlessDefault);
 
-    NSUserDefaults * const defaults = NSUserDefaults.xquartzDefaults;
-    [defaults setBool:XQuartzRootlessDefault forKey:XQuartzPrefKeyRootless];
+    [NSApp prefs_set_boolean:@PREFS_ROOTLESS value:XQuartzRootlessDefault];
+    [NSApp prefs_synchronize];
 }
 
 - (IBAction) toggle_fullscreen:sender
@@ -698,43 +694,55 @@ extern char *bundle_id_prefix;
     if (!sender)
         return;
 
-    NSUserDefaults * const defaults = NSUserDefaults.xquartzDefaults;
-
     if (sender == self.fake_buttons) {
-        darwinFakeButtons = !!self.fake_buttons.state;
-        [defaults setBool:darwinFakeButtons forKey:XQuartzPrefKeyFakeButtons];
-    } else if (sender == self.enable_keyequivs) {
-        XQuartzEnableKeyEquivalents = !!self.enable_keyequivs.state;
-        [defaults setBool:XQuartzEnableKeyEquivalents forKey:XQuartzPrefKeyKeyEquivs];
-    } else if (sender == self.sync_keymap) {
-        darwinSyncKeymap = !!self.sync_keymap.state;
-        [defaults setBool:darwinSyncKeymap forKey:XQuartzPrefKeySyncKeymap];
-    } else if (sender == self.enable_fullscreen_menu) {
-        XQuartzFullscreenMenu = !!self.enable_fullscreen_menu.state;
-        [defaults setBool:XQuartzFullscreenMenu forKey:XQuartzPrefKeyFullscreenMenu];
-    } else if (sender == self.option_sends_alt) {
+        darwinFakeButtons = self.fake_buttons.intValue;
+        [NSApp prefs_set_boolean:@PREFS_FAKEBUTTONS value:darwinFakeButtons];
+    }
+    else if (sender == self.enable_keyequivs) {
+        XQuartzEnableKeyEquivalents = self.enable_keyequivs.intValue;
+        [NSApp prefs_set_boolean:@PREFS_KEYEQUIVS value:
+         XQuartzEnableKeyEquivalents];
+    }
+    else if (sender == self.sync_keymap) {
+        darwinSyncKeymap = self.sync_keymap.intValue;
+        [NSApp prefs_set_boolean:@PREFS_SYNC_KEYMAP value:darwinSyncKeymap];
+    }
+    else if (sender == self.enable_fullscreen_menu) {
+        XQuartzFullscreenMenu = self.enable_fullscreen_menu.intValue;
+        [NSApp prefs_set_boolean:@PREFS_FULLSCREEN_MENU value:
+         XQuartzFullscreenMenu];
+    }
+    else if (sender == self.option_sends_alt) {
         BOOL prev_opt_sends_alt = XQuartzOptionSendsAlt;
 
-        XQuartzOptionSendsAlt = !!self.option_sends_alt.state;
-        [defaults setBool:XQuartzOptionSendsAlt forKey:XQuartzPrefKeyOptionSendsAlt];
+        XQuartzOptionSendsAlt = self.option_sends_alt.intValue;
+        [NSApp prefs_set_boolean:@PREFS_OPTION_SENDS_ALT value:
+        XQuartzOptionSendsAlt];
 
         if (prev_opt_sends_alt != XQuartzOptionSendsAlt)
             QuartsResyncKeymap(TRUE);
-    } else if (sender == self.click_through) {
-        [defaults setBool:!!self.click_through.state forKey:XQuartzPrefKeyClickThrough];
-    } else if (sender == self.focus_follows_mouse) {
-        [defaults setBool:!!self.focus_follows_mouse.state forKey:XQuartzPrefKeyFocusFollowsMouse];
-    } else if (sender == self.focus_on_new_window) {
-        [defaults setBool:!!self.focus_on_new_window.state forKey:XQuartzPrefKeyFocusOnNewWindow];
-    } else if (sender == self.enable_auth) {
-        [defaults setBool:!self.enable_auth.state forKey:XQuartzPrefKeyNoAuth];
-    } else if (sender == self.enable_tcp) {
-        [defaults setBool:!self.enable_tcp.state forKey:XQuartzPrefKeyNoTCP];
-    } else if (sender == self.depth) {
-        [defaults setInteger:self.depth.selectedTag forKey:XQuartzPrefKeyDepth];
-    } else if (sender == self.sync_pasteboard) {
+    }
+    else if (sender == self.click_through) {
+        [NSApp prefs_set_boolean:@PREFS_CLICK_THROUGH value:self.click_through.intValue];
+    }
+    else if (sender == self.focus_follows_mouse) {
+        [NSApp prefs_set_boolean:@PREFS_FFM value:self.focus_follows_mouse.intValue];
+    }
+    else if (sender == self.focus_on_new_window) {
+        [NSApp prefs_set_boolean:@PREFS_FOCUS_ON_NEW_WINDOW value:self.focus_on_new_window.intValue];
+    }
+    else if (sender == self.enable_auth) {
+        [NSApp prefs_set_boolean:@PREFS_NO_AUTH value:!self.enable_auth.intValue];
+    }
+    else if (sender == self.enable_tcp) {
+        [NSApp prefs_set_boolean:@PREFS_NO_TCP value:!self.enable_tcp.intValue];
+    }
+    else if (sender == self.depth) {
+        [NSApp prefs_set_integer:@PREFS_DEPTH value:self.depth.selectedTag];
+    }
+    else if (sender == self.sync_pasteboard) {
         BOOL pbproxy_active = self.sync_pasteboard.intValue;
-        [defaults setBool:pbproxy_active forKey:XQuartzPrefKeySyncPasteboard];
+        [NSApp prefs_set_boolean:@PREFS_SYNC_PB value:pbproxy_active];
 
         [self.sync_pasteboard_to_clipboard setEnabled:pbproxy_active];
         [self.sync_pasteboard_to_primary setEnabled:pbproxy_active];
@@ -744,27 +752,33 @@ extern char *bundle_id_prefix;
         // setEnabled doesn't do this...
         [self.sync_text1 setTextColor:pbproxy_active ? NSColor.controlTextColor : NSColor.disabledControlTextColor];
         [self.sync_text2 setTextColor:pbproxy_active ? NSColor.controlTextColor : NSColor.disabledControlTextColor];
-    } else if (sender == self.sync_pasteboard_to_clipboard) {
-        [defaults setBool:!!self.sync_pasteboard_to_clipboard.state forKey:XQuartzPrefKeySyncPasteboardToClipboard];
-    } else if (sender == self.sync_pasteboard_to_primary) {
-        [defaults setBool:!!self.sync_pasteboard_to_primary.state forKey:XQuartzPrefKeySyncPasteboardToPrimary];
-    } else if (sender == self.sync_clipboard_to_pasteboard) {
-        [defaults setBool:!!self.sync_clipboard_to_pasteboard.state forKey:XQuartzPrefKeySyncClipboardToPasteBoard];
-    } else if (sender == self.sync_primary_immediately) {
-        [defaults setBool:!!self.sync_primary_immediately.state forKey:XQuartzPrefKeySyncPrimaryOnSelect];
-    } else if (sender == self.scroll_in_device_direction) {
-        XQuartzScrollInDeviceDirection = !!self.scroll_in_device_direction.state;
-        [defaults setBool:XQuartzScrollInDeviceDirection forKey:XQuartzPrefKeyScrollInDeviceDirection];
     }
+    else if (sender == self.sync_pasteboard_to_clipboard) {
+        [NSApp prefs_set_boolean:@PREFS_SYNC_PB_TO_CLIPBOARD value:self.sync_pasteboard_to_clipboard.intValue];
+    }
+    else if (sender == self.sync_pasteboard_to_primary) {
+        [NSApp prefs_set_boolean:@PREFS_SYNC_PB_TO_PRIMARY value:self.sync_pasteboard_to_primary.intValue];
+    }
+    else if (sender == self.sync_clipboard_to_pasteboard) {
+        [NSApp prefs_set_boolean:@PREFS_SYNC_CLIPBOARD_TO_PB value:self.sync_clipboard_to_pasteboard.intValue];
+    }
+    else if (sender == self.sync_primary_immediately) {
+        [NSApp prefs_set_boolean:@PREFS_SYNC_PRIMARY_ON_SELECT value:self.sync_primary_immediately.intValue];
+    }
+    else if (sender == self.scroll_in_device_direction) {
+        XQuartzScrollInDeviceDirection = self.scroll_in_device_direction.intValue;
+        [NSApp prefs_set_boolean:@PREFS_SCROLL_IN_DEV_DIRECTION value:XQuartzScrollInDeviceDirection];
+    }
+
+    [NSApp prefs_synchronize];
 
     DarwinSendDDXEvent(kXquartzReloadPreferences, 0);
 }
 
 - (IBAction) prefs_show:sender
 {
-    NSUserDefaults * const defaults = NSUserDefaults.xquartzDefaults;
-
-    BOOL pbproxy_active = [defaults boolForKey:XQuartzPrefKeySyncPasteboard];
+    BOOL pbproxy_active =
+        [NSApp prefs_get_boolean:@PREFS_SYNC_PB default:YES];
 
     [self.scroll_in_device_direction setIntValue:XQuartzScrollInDeviceDirection];
 
@@ -772,20 +786,20 @@ extern char *bundle_id_prefix;
     [self.enable_keyequivs setIntValue:XQuartzEnableKeyEquivalents];
     [self.sync_keymap setIntValue:darwinSyncKeymap];
     [self.option_sends_alt setIntValue:XQuartzOptionSendsAlt];
-    [self.click_through setIntValue:[defaults boolForKey:XQuartzPrefKeyClickThrough]];
-    [self.focus_follows_mouse setIntValue:[defaults boolForKey:XQuartzPrefKeyFocusFollowsMouse]];
-    [self.focus_on_new_window setIntValue:[defaults boolForKey:XQuartzPrefKeyFocusOnNewWindow]];
+    [self.click_through setIntValue:[NSApp prefs_get_boolean:@PREFS_CLICK_THROUGH default:NO]];
+    [self.focus_follows_mouse setIntValue:[NSApp prefs_get_boolean:@PREFS_FFM default:NO]];
+    [self.focus_on_new_window setIntValue:[NSApp prefs_get_boolean:@PREFS_FOCUS_ON_NEW_WINDOW default:YES]];
 
-    [self.enable_auth setIntValue:![defaults boolForKey:XQuartzPrefKeyNoAuth]];
-    [self.enable_tcp setIntValue:![defaults boolForKey:XQuartzPrefKeyNoTCP]];
+    [self.enable_auth setIntValue:![NSApp prefs_get_boolean:@PREFS_NO_AUTH default:NO]];
+    [self.enable_tcp setIntValue:![NSApp prefs_get_boolean:@PREFS_NO_TCP default:NO]];
 
-    [self.depth selectItemAtIndex:[self.depth indexOfItemWithTag:[defaults integerForKey:XQuartzPrefKeyDepth]]];
+    [self.depth selectItemAtIndex:[self.depth indexOfItemWithTag:[NSApp prefs_get_integer:@PREFS_DEPTH default:-1]]];
 
     [self.sync_pasteboard setIntValue:pbproxy_active];
-    [self.sync_pasteboard_to_clipboard setIntValue:[defaults boolForKey:XQuartzPrefKeySyncPasteboardToClipboard]];
-    [self.sync_pasteboard_to_primary setIntValue:[defaults boolForKey:XQuartzPrefKeySyncPasteboardToPrimary]];
-    [self.sync_clipboard_to_pasteboard setIntValue:[defaults boolForKey:XQuartzPrefKeySyncClipboardToPasteBoard]];
-    [self.sync_primary_immediately setIntValue:[defaults boolForKey:XQuartzPrefKeySyncPrimaryOnSelect]];
+    [self.sync_pasteboard_to_clipboard setIntValue:[NSApp prefs_get_boolean:@PREFS_SYNC_PB_TO_CLIPBOARD default:YES]];
+    [self.sync_pasteboard_to_primary setIntValue:[NSApp prefs_get_boolean:@PREFS_SYNC_PB_TO_PRIMARY default:YES]];
+    [self.sync_clipboard_to_pasteboard setIntValue:[NSApp prefs_get_boolean:@PREFS_SYNC_CLIPBOARD_TO_PB default:YES]];
+    [self.sync_primary_immediately setIntValue:[NSApp prefs_get_boolean:@PREFS_SYNC_PRIMARY_ON_SELECT default:NO]];
 
     [self.sync_pasteboard_to_clipboard setEnabled:pbproxy_active];
     [self.sync_pasteboard_to_primary setEnabled:pbproxy_active];
@@ -850,11 +864,9 @@ extern char *bundle_id_prefix;
     NSString *msg;
     NSString *title;
 
-    NSUserDefaults * const defaults = NSUserDefaults.xquartzDefaults;
-
-    if (self.can_quit || [defaults boolForKey:XQuartzPrefKeyNoQuitAlert]) {
+    if (self.can_quit ||
+        [X11App prefs_get_boolean:@PREFS_NO_QUIT_ALERT default:NO])
         return NSTerminateNow;
-    }
 
     /* Make sure we're frontmost. */
     [NSApp activateIgnoringOtherApps:YES];
@@ -876,6 +888,8 @@ extern char *bundle_id_prefix;
 
 - (void) applicationWillTerminate:(NSNotification *)aNotification _X_NORETURN
 {
+    [X11App prefs_synchronize];
+
     /* shutdown the X server, it will exit () for us. */
     DarwinSendDDXEvent(kXquartzQuit, 0);
 
diff --git a/hw/xquartz/bundle/Xquartz.plist b/hw/xquartz/bundle/Xquartz.plist
new file mode 100644
index 000000000..e15704516
--- /dev/null
+++ b/hw/xquartz/bundle/Xquartz.plist
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+
+<!-- This file contains system-wide defaults for the Apple X11 server -->
+
+<plist version="1.0">
+<dict>
+	<key>apps_menu</key>
+	<array>
+		<array>
+			<string>Terminal</string>
+			<string>xterm</string>
+			<string>n</string>
+		</array>
+		<array>
+			<string>xman</string>
+			<string>xman</string>
+			<string></string>
+		</array>
+		<array>
+			<string>xlogo</string>
+			<string>xlogo</string>
+			<string></string>
+		</array>
+	</array>
+</dict>
+</plist>
diff --git a/hw/xquartz/meson.build b/hw/xquartz/meson.build
index 83e79eae8..a08d67d43 100644
--- a/hw/xquartz/meson.build
+++ b/hw/xquartz/meson.build
@@ -41,7 +41,6 @@ endif
 
 # libxquartz
 srcs_libxquartz = [
-    'NSUserDefaults+XQuartzDefaults.m',
     'X11Application.m',
     'X11Controller.m',
     'applewm.c',
diff --git a/hw/xquartz/quartz.c b/hw/xquartz/quartz.c
index 9054ddcd5..b5f93e182 100644
--- a/hw/xquartz/quartz.c
+++ b/hw/xquartz/quartz.c
@@ -95,16 +95,14 @@ int aquaMenuBarHeight = 0;
 QuartzModeProcsPtr quartzProcs = NULL;
 const char             *quartzOpenGLBundle = NULL;
 
-/* These are initialized by X11Application with default values set in NSUserDefaults+XQuartzDefaults */
-Bool XQuartzFullscreenDisableHotkeys;
-Bool XQuartzOptionSendsAlt;
-Bool XQuartzEnableKeyEquivalents;
-Bool XQuartzFullscreenMenu;
-Bool XQuartzRootlessDefault;
-
+Bool XQuartzFullscreenDisableHotkeys = TRUE;
+Bool XQuartzOptionSendsAlt = FALSE;
+Bool XQuartzEnableKeyEquivalents = TRUE;
 Bool XQuartzFullscreenVisible = FALSE;
+Bool XQuartzRootlessDefault = TRUE;
 Bool XQuartzIsRootless = TRUE;
 Bool XQuartzServerVisible = FALSE;
+Bool XQuartzFullscreenMenu = FALSE;
 
 int32_t XQuartzShieldingWindowLevel = 0;
 
-- 
2.46.0

