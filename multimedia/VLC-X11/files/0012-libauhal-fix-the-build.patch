From 95f97fdc86b55beaced2922689019b5fdc657524 Mon Sep 17 00:00:00 2001
From: barracuda156 <vital.had@gmail.com>
Date: Thu, 18 Apr 2024 17:38:52 +0800
Subject: [PATCH 12/13] libauhal: fix the build

diff --git modules/audio_output/auhal.c modules/audio_output/auhal.c
index 38dbf39c9e..6f8346e6fe 100644
--- modules/audio_output/auhal.c
+++ modules/audio_output/auhal.c
@@ -288,7 +288,7 @@ AoUpdateListener(audio_output_t *p_aout, bool add, AudioObjectID id,
 #pragma mark Stream / Hardware Listeners
 
 static bool
-IsAudioFormatDigital(AudioFormatID id)
+IsAudioFormatDigital(UInt32 id)
 {
     switch (id)
     {
@@ -296,7 +296,7 @@ IsAudioFormatDigital(AudioFormatID id)
         case 'iac3':
         case kAudioFormat60958AC3:
         case kAudioFormatAC3:
-        case kAudioFormatEnhancedAC3:
+        case 'ec-3':
             return true;
         default:
             return false;
@@ -316,7 +316,7 @@ ManageAudioStreamsCallback(audio_output_t *p_aout, AudioDeviceID i_dev_id,
     AudioStreamID *p_streams;
     int ret = AO_GETPROP(i_dev_id, AudioStreamID, &i_streams, &p_streams,
                           kAudioDevicePropertyStreams,
-                          kAudioObjectPropertyScopeOutput);
+                          kAudioDevicePropertyScopeOutput);
     if (ret != VLC_SUCCESS)
         return ret;
 
@@ -376,7 +376,7 @@ AudioDeviceSupportsDigital(audio_output_t *p_aout, AudioDeviceID i_dev_id)
     AudioStreamID * p_streams;
     int ret = AO_GETPROP(i_dev_id, AudioStreamID, &i_streams, &p_streams,
                           kAudioDevicePropertyStreams,
-                          kAudioObjectPropertyScopeOutput);
+                          kAudioDevicePropertyScopeOutput);
     if (ret != VLC_SUCCESS)
         return false;
 
@@ -447,7 +447,7 @@ AudioDeviceHasOutput(audio_output_t *p_aout, AudioDeviceID i_dev_id)
     size_t i_streams;
     int ret = AO_GETPROP(i_dev_id, AudioStreamID, &i_streams, NULL,
                           kAudioDevicePropertyStreams,
-                          kAudioObjectPropertyScopeOutput);
+                          kAudioDevicePropertyScopeOutput);
     if (ret != VLC_SUCCESS || i_streams == 0)
         return FALSE;
 
@@ -640,7 +640,7 @@ DefaultDeviceChangedListener(AudioObjectID inObjectID, UInt32 inNumberAddresses,
     int ret = AO_GET1PROP(kAudioObjectSystemObject, AudioObjectID,
                           &defaultDeviceID,
                           kAudioHardwarePropertyDefaultOutputDevice,
-                          kAudioObjectPropertyScopeOutput);
+                          kAudioDevicePropertyScopeOutput);
     if (ret != VLC_SUCCESS)
         return -1;
 
@@ -704,7 +704,7 @@ StreamsChangedListener(AudioObjectID inObjectID, UInt32 inNumberAddresses,
     AudioStreamID *p_streams;
     int ret = AO_GETPROP(p_sys->i_selected_dev, AudioStreamID, &i_streams,
                          &p_streams, kAudioDevicePropertyStreams,
-                         kAudioObjectPropertyScopeOutput);
+                         kAudioDevicePropertyScopeOutput);
     if (ret != VLC_SUCCESS)
     {
         vlc_mutex_unlock(&p_sys->selected_device_lock);
@@ -1162,7 +1162,7 @@ StartSPDIF(audio_output_t * p_aout, audio_sample_format_t *fmt)
 
     ret = AO_GET1PROP(p_sys->i_selected_dev, pid_t, &p_sys->i_hog_pid,
                       kAudioDevicePropertyHogMode,
-                      kAudioObjectPropertyScopeOutput);
+                      kAudioDevicePropertyScopeOutput);
     if (ret != VLC_SUCCESS)
     {
         /* This is not a fatal error. Some drivers simply don't support this
@@ -1197,7 +1197,7 @@ StartSPDIF(audio_output_t * p_aout, audio_sample_format_t *fmt)
     p_sys->b_ignore_streams_changed_callback = true;
     ret = AO_SETPROP(p_sys->i_selected_dev, sizeof(p_sys->i_hog_pid),
                      &p_sys->i_hog_pid, kAudioDevicePropertyHogMode,
-                     kAudioObjectPropertyScopeOutput);
+                     kAudioDevicePropertyScopeOutput);
     p_sys->b_ignore_streams_changed_callback = false;
 
     if (ret != VLC_SUCCESS)
@@ -1236,7 +1236,7 @@ StartSPDIF(audio_output_t * p_aout, audio_sample_format_t *fmt)
     AudioStreamID *p_streams;
     ret = AO_GETPROP(p_sys->i_selected_dev, AudioStreamID, &i_streams,
                      &p_streams, kAudioDevicePropertyStreams,
-                     kAudioObjectPropertyScopeOutput);
+                     kAudioDevicePropertyScopeOutput);
     if (ret != VLC_SUCCESS)
         return ret;
 
@@ -1458,7 +1458,7 @@ Stop(audio_output_t *p_aout)
                                   kAudioObjectPropertyScopeGlobal);
             int ret = AO_GET1PROP(p_sys->i_selected_dev, UInt32, &b_mix,
                                   kAudioDevicePropertySupportsMixing,
-                                  kAudioObjectPropertyScopeOutput);
+                                  kAudioDevicePropertyScopeOutput);
             if (ret == VLC_SUCCESS && b_writeable)
             {
                 msg_Dbg(p_aout, "mixable is: %d", b_mix);
@@ -1466,7 +1466,7 @@ Stop(audio_output_t *p_aout)
                 ret = AO_SETPROP(p_sys->i_selected_dev,
                                  sizeof(UInt32), &b_mix,
                                  kAudioDevicePropertySupportsMixing,
-                                 kAudioObjectPropertyScopeOutput);
+                                 kAudioDevicePropertyScopeOutput);
             }
 
             if (ret != VLC_SUCCESS)
@@ -1486,7 +1486,7 @@ Stop(audio_output_t *p_aout)
             p_sys->b_ignore_streams_changed_callback = true;
             AO_SETPROP(p_sys->i_selected_dev, sizeof(p_sys->i_hog_pid),
                        &p_sys->i_hog_pid, kAudioDevicePropertyHogMode,
-                       kAudioObjectPropertyScopeOutput);
+                       kAudioDevicePropertyScopeOutput);
             p_sys->b_ignore_streams_changed_callback = false;
         }
 
@@ -1583,7 +1583,7 @@ Start(audio_output_t *p_aout, audio_sample_format_t *restrict fmt)
         int ret = AO_GET1PROP(kAudioObjectSystemObject, AudioObjectID,
                               &defaultDeviceID,
                               kAudioHardwarePropertyDefaultOutputDevice,
-                              kAudioObjectPropertyScopeOutput);
+                              kAudioDevicePropertyScopeOutput);
         if (ret != VLC_SUCCESS)
         {
             vlc_mutex_unlock(&p_sys->selected_device_lock);
@@ -1606,7 +1606,7 @@ Start(audio_output_t *p_aout, audio_sample_format_t *restrict fmt)
     vlc_tick_t i_latency_us = 0;
     int ret = AO_GET1PROP(p_sys->i_selected_dev, UInt32, &i_latency_samples,
                           kAudioDevicePropertyLatency,
-                          kAudioObjectPropertyScopeOutput);
+                          kAudioDevicePropertyScopeOutput);
     if (ret == VLC_SUCCESS)
         i_latency_us += i_latency_samples * CLOCK_FREQ / fmt->i_rate;
 
