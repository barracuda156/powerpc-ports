From d4b716c9dfb6c6744921f2da958d63391c2d2def Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <vital.had@gmail.com>
Date: Wed, 20 Nov 2024 04:56:05 +0800
Subject: [PATCH 9/9] Hackish backports, likely broken

---
 src/modules/Extensions/Extensions.cpp |   97 +--
 src/modules/Extensions/Extensions.hpp |    4 +-
 src/modules/Extensions/YouTube.cpp    | 1048 ++++++++++---------------
 src/modules/Extensions/YouTube.hpp    |   45 +-
 src/qmplay2/Functions.cpp             |   31 -
 src/qmplay2/YouTubeDL.cpp             |   60 +-
 src/qmplay2/headers/Functions.hpp     |    2 -
 src/qmplay2/headers/YouTubeDL.hpp     |    2 +-
 8 files changed, 463 insertions(+), 826 deletions(-)

diff --git a/src/modules/Extensions/Extensions.cpp b/src/modules/Extensions/Extensions.cpp
index 8a8ae340..5e4106cc 100644
--- a/src/modules/Extensions/Extensions.cpp
+++ b/src/modules/Extensions/Extensions.cpp
@@ -46,12 +46,8 @@ Extensions::Extensions() :
 	lastfm = QIcon(":/lastfm.svgz");
 #endif
 
-	init("YouTube/ShowAdditionalInfo", false);
-	init("YouTube/MultiStream", true);
+	init("YouTube/ShowUserName", false);
 	init("YouTube/Subtitles", true);
-	init("YouTube/ItagVideoList", YouTube::getQualityPresetString(YouTube::_1080p60));
-	init("YouTube/ItagAudioList", QStringList{"251", "171", "140"});
-	init("YouTube/ItagList", QStringList{"22", "43", "18"});
 
 #ifdef USE_LASTFM
 	init("LastFM/DownloadCovers", true);
@@ -143,78 +139,17 @@ ModuleSettingsWidget::ModuleSettingsWidget(Module &module) :
 	MPRIS2B->setChecked(sets().getBool("MPRIS2/Enabled"));
 #endif
 
-	const ItagNames itagVideoNames = YouTube::getItagNames(sets().getStringList("YouTube/ItagVideoList"), YouTube::MEDIA_VIDEO);
-	const ItagNames itagAudioNames = YouTube::getItagNames(sets().getStringList("YouTube/ItagAudioList"), YouTube::MEDIA_AUDIO);
-	const ItagNames itagNames = YouTube::getItagNames(sets().getStringList("YouTube/ItagList"), YouTube::MEDIA_AV);
-
 	QGroupBox *youTubeB = new QGroupBox("YouTube");
-
-	additionalInfoB = new QCheckBox(tr("Show additional search information"));
-	additionalInfoB->setChecked(sets().getBool("YouTube/ShowAdditionalInfo"));
-
-	multiStreamB = new QCheckBox(tr("Use different audio and video streams"));
-	multiStreamB->setChecked(sets().getBool("YouTube/MultiStream"));
-	connect(multiStreamB, SIGNAL(clicked(bool)), this, SLOT(enableItagLists(bool)));
+	userNameB = new QCheckBox(tr("Show user name in search results"));
+	userNameB->setChecked(sets().getBool("YouTube/ShowUserName"));
 
 	subtitlesB = new QCheckBox(tr("Display subtitles if available"));
 	subtitlesB->setToolTip(tr("Displays subtitles from YouTube. Follows default subtitles language and QMPlay2 language."));
 	subtitlesB->setChecked(sets().getBool("YouTube/Subtitles"));
 
-
-	QLabel *itagL = new QLabel(tr("Priority of default video/audio quality") + ": ");
-
-	itagLW = new QListWidget;
-	itagLW->setDragDropMode(QListWidget::InternalMove);
-	itagLW->setSelectionMode(QListWidget::ExtendedSelection);
-
-	QLabel *itagVideoL = new QLabel(tr("Priority of default video quality") + ": ");
-
-	itagVideoLW = new QListWidget;
-	itagVideoLW->setDragDropMode(QListWidget::InternalMove);
-	itagVideoLW->setSelectionMode(QListWidget::ExtendedSelection);
-
-	QLabel *itagAudioL = new QLabel(tr("Priority of default audio quality") + ": ");
-
-	itagAudioLW = new QListWidget;
-	itagAudioLW->setDragDropMode(QListWidget::InternalMove);
-	itagAudioLW->setSelectionMode(QListWidget::ExtendedSelection);
-
-	for (int i = 0; i < itagVideoNames.first.count(); ++i)
-	{
-		QListWidgetItem *lWI = new QListWidgetItem(itagVideoLW);
-		lWI->setText(itagVideoNames.first[i]);
-		lWI->setData(Qt::UserRole, itagVideoNames.second[i]);
-	}
-	for (int i = 0; i < itagAudioNames.first.count(); ++i)
-	{
-		QListWidgetItem *lWI = new QListWidgetItem(itagAudioLW);
-		lWI->setText(itagAudioNames.first[i]);
-		lWI->setData(Qt::UserRole, itagAudioNames.second[i]);
-	}
-	for (int i = 0; i < itagNames.first.count(); ++i)
-	{
-		QListWidgetItem *lWI = new QListWidgetItem(itagLW);
-		lWI->setText(itagNames.first[i]);
-		lWI->setData(Qt::UserRole, itagNames.second[i]);
-	}
-
-	enableItagLists(multiStreamB->isChecked());
-
-	QGridLayout *itagLayout = new QGridLayout;
-	itagLayout->addWidget(itagVideoL, 0, 0, 1, 1);
-	itagLayout->addWidget(itagVideoLW, 1, 0, 1, 1);
-	itagLayout->addWidget(itagAudioL, 0, 1, 1, 1);
-	itagLayout->addWidget(itagAudioLW, 1, 1, 1, 1);
-	itagLayout->addWidget(itagL, 0, 2, 1, 1);
-	itagLayout->addWidget(itagLW, 1, 2, 1, 1);
-	itagLayout->setMargin(0);
-
-
 	layout = new QGridLayout(youTubeB);
-	layout->addWidget(additionalInfoB, 0, 0, 1, 3);
-	layout->addWidget(multiStreamB, 1, 0, 1, 3);
-	layout->addWidget(subtitlesB, 2, 0, 1, 3);
-	layout->addLayout(itagLayout, 3, 0, 1, 3);
+	layout->addWidget(userNameB);
+	layout->addWidget(subtitlesB);
 	layout->setMargin(2);
 
 #ifdef USE_LASTFM
@@ -256,7 +191,7 @@ ModuleSettingsWidget::ModuleSettingsWidget(Module &module) :
 #endif
 
 	QGridLayout *mainLayout = new QGridLayout(this);
-	mainLayout->setProperty("NoVHSpacer", true);
+	mainLayout->setProperty("NoVHSpacer", false);
 #ifdef USE_MPRIS2
 	mainLayout->addWidget(MPRIS2B);
 #endif
@@ -266,12 +201,6 @@ ModuleSettingsWidget::ModuleSettingsWidget(Module &module) :
 #endif
 }
 
-void ModuleSettingsWidget::enableItagLists(bool b)
-{
-	itagVideoLW->setEnabled(b);
-	itagAudioLW->setEnabled(b);
-	itagLW->setDisabled(b);
-}
 #ifdef USE_LASTFM
 void ModuleSettingsWidget::loginPasswordEnable(bool checked)
 {
@@ -290,21 +219,9 @@ void ModuleSettingsWidget::saveSettings()
 	sets().set("MPRIS2/Enabled", MPRIS2B->isChecked());
 #endif
 
-	sets().set("YouTube/ShowAdditionalInfo", additionalInfoB->isChecked());
-	sets().set("YouTube/MultiStream", multiStreamB->isChecked());
+	sets().set("YouTube/ShowUserName", userNameB->isChecked());
 	sets().set("YouTube/Subtitles", subtitlesB->isChecked());
 
-	QStringList itagsVideo, itagsAudio, itags;
-	for (int i = 0; i < itagVideoLW->count(); ++i)
-		itagsVideo += itagVideoLW->item(i)->data(Qt::UserRole).toString();
-	for (int i = 0; i < itagAudioLW->count(); ++i)
-		itagsAudio += itagAudioLW->item(i)->data(Qt::UserRole).toString();
-	for (int i = 0; i < itagLW->count(); ++i)
-		itags += itagLW->item(i)->data(Qt::UserRole).toString();
-	sets().set("YouTube/ItagVideoList", itagsVideo);
-	sets().set("YouTube/ItagAudioList", itagsAudio);
-	sets().set("YouTube/ItagList", itags);
-
 #ifdef USE_LASTFM
 	sets().set("LastFM/DownloadCovers", downloadCoversGB->isChecked());
 	sets().set("LastFM/AllowBigCovers", allowBigCovers->isChecked());
diff --git a/src/modules/Extensions/Extensions.hpp b/src/modules/Extensions/Extensions.hpp
index 3ae4d422..6c7ac36d 100644
--- a/src/modules/Extensions/Extensions.hpp
+++ b/src/modules/Extensions/Extensions.hpp
@@ -50,7 +50,6 @@ class ModuleSettingsWidget : public Module::SettingsWidget
 public:
 	ModuleSettingsWidget(Module &);
 private slots:
-	void enableItagLists(bool b);
 #ifdef USE_LASTFM
 	void loginPasswordEnable(bool checked);
 	void passwordEdited();
@@ -62,8 +61,7 @@ private:
 	QCheckBox *MPRIS2B;
 #endif
 
-	QCheckBox *additionalInfoB, *multiStreamB, *subtitlesB;
-	QListWidget *itagLW, *itagVideoLW, *itagAudioLW;
+	QCheckBox *userNameB, *subtitlesB;
 
 #ifdef USE_LASTFM
 	QGroupBox *downloadCoversGB;
diff --git a/src/modules/Extensions/YouTube.cpp b/src/modules/Extensions/YouTube.cpp
index 73924de2..a069d1e6 100644
--- a/src/modules/Extensions/YouTube.cpp
+++ b/src/modules/Extensions/YouTube.cpp
@@ -18,10 +18,8 @@
 
 #include <YouTube.hpp>
 
-#include <Functions.hpp>
 #include <YouTubeDL.hpp>
 #include <LineEdit.hpp>
-#include <Playlist.hpp>
 
 #include <QStringListModel>
 #include <QDesktopServices>
@@ -33,27 +31,17 @@
 #include <QApplication>
 #include <QHeaderView>
 #include <QGridLayout>
-#include <QMouseEvent>
 #include <QToolButton>
-#include <QMessageBox>
 #include <QCompleter>
 #include <QClipboard>
 #include <QMimeData>
 #include <QSpinBox>
-#include <QProcess>
 #include <QAction>
-#include <QLabel>
 #include <QMenu>
-#include <QDrag>
-#include <QFile>
-#include <QDir>
 #include <QUrl>
 
 #define YOUTUBE_URL "https://www.youtube.com"
 
-constexpr char g_cantFindTheTitle[] = "(Can't find the title)";
-static QMap<int, QString> g_itagArr;
-
 static inline QString toPercentEncoding(const QString &txt)
 {
 	return txt.toUtf8().toPercentEncoding();
@@ -67,33 +55,6 @@ static inline QString getAutocompleteUrl(const QString &text)
 {
 	return QString("http://suggestqueries.google.com/complete/search?client=firefox&ds=yt&q=%1").arg(toPercentEncoding(text));
 }
-static inline QString getSubsUrl(const QString &langCode, const QString &vidId)
-{
-	return QString(YOUTUBE_URL "/api/timedtext?lang=%1&fmt=vtt&v=%2").arg(langCode, vidId);
-}
-
-static inline QString getFileExtension(const QString &ItagName)
-{
-	if (ItagName.contains("WebM") || ItagName.contains("VP9") || ItagName.contains("VP8") || ItagName.contains("Vorbis") || ItagName.contains("Opus"))
-		return ".webm";
-	else if (ItagName.contains("AAC") || ItagName.contains("H.264"))
-		return ".mp4";
-	else if (ItagName.contains("FLV"))
-		return ".flv";
-	return ".unknown";
-}
-
-static inline QString getQMPlay2Url(const QTreeWidgetItem *tWI)
-{
-	if (tWI->parent())
-		return "YouTube://{" + tWI->parent()->data(0, Qt::UserRole).toString() + "}" + tWI->data(0, Qt::UserRole + 1).toString();
-	return "YouTube://{" + tWI->data(0, Qt::UserRole).toString() + "}";
-}
-
-static inline QString unescape(const QString &str)
-{
-	return QByteArray::fromPercentEncoding(str.toLatin1());
-}
 
 static QString fromU(QString s)
 {
@@ -123,9 +84,8 @@ static inline bool isPlaylist(QTreeWidgetItem *tWI)
 
 /**/
 
-ResultsYoutube::ResultsYoutube() :
-	menu(new QMenu(this)),
-	pixels(0)
+ResultsYoutube::ResultsYoutube()
+	: menu(new QMenu(this))
 {
 	setAnimated(true);
 	setIndentation(12);
@@ -149,23 +109,14 @@ ResultsYoutube::ResultsYoutube() :
 ResultsYoutube::~ResultsYoutube()
 {}
 
-QTreeWidgetItem *ResultsYoutube::getDefaultQuality(const QTreeWidgetItem *tWI)
-{
-	if (!tWI->childCount())
-		return nullptr;
-	for (int itag : itags)
-		for (int i = 0; i < tWI->childCount(); ++i)
-			if (tWI->child(i)->data(0, Qt::UserRole + 2).toInt() == itag)
-				return tWI->child(i);
-	return tWI->child(0);
-}
-
-void ResultsYoutube::playOrEnqueue(const QString &param, QTreeWidgetItem *tWI)
+void ResultsYoutube::playOrEnqueue(const QString &param, QTreeWidgetItem *tWI, const QString &addrParam)
 {
 	if (!tWI)
 		return;
 	if (!isPlaylist(tWI))
-		emit QMPlay2Core.processParam(param, getQMPlay2Url(tWI));
+	{
+		emit QMPlay2Core.processParam(param, "YouTube://{" + tWI->data(0, Qt::UserRole).toString() + "}" + addrParam);
+	}
 	else
 	{
 		const QStringList ytPlaylist = tWI->data(0, Qt::UserRole + 1).toStringList();
@@ -180,58 +131,6 @@ void ResultsYoutube::playOrEnqueue(const QString &param, QTreeWidgetItem *tWI)
 	}
 }
 
-void ResultsYoutube::mouseMoveEvent(QMouseEvent *e)
-{
-	if (++pixels == 25)
-	{
-		QTreeWidgetItem *tWI = currentItem();
-		if (tWI && !isPlaylist(tWI))
-		{
-			QString url;
-			if (e->buttons() & Qt::LeftButton)
-				url = getQMPlay2Url(tWI);
-			else if (e->buttons() & Qt::MiddleButton) //Link do strumienia
-			{
-				QTreeWidgetItem *tWI2 = tWI->parent() ? tWI : getDefaultQuality(tWI);
-				if (tWI2)
-					url = tWI2->data(0, Qt::UserRole).toString();
-			}
-			if (!url.isEmpty())
-			{
-				QMimeData *mimeData = new QMimeData;
-				if (e->buttons() & Qt::LeftButton)
-					mimeData->setText(url);
-				else if (e->buttons() & Qt::MiddleButton)
-					mimeData->setUrls(QList<QUrl>() << url);
-
-				if (tWI->parent())
-					tWI = tWI->parent();
-
-				QDrag *drag = new QDrag(this);
-				drag->setMimeData(mimeData);
-				drag->setPixmap(Functions::getPixmapFromIcon(tWI->icon(0), iconSize(), this));
-				drag->exec(Qt::CopyAction | Qt::MoveAction | Qt::LinkAction);
-				pixels = 0;
-				return;
-			}
-		}
-	}
-	QTreeWidget::mouseMoveEvent(e);
-}
-void ResultsYoutube::mouseReleaseEvent(QMouseEvent *e)
-{
-	pixels = 0;
-	QTreeWidget::mouseReleaseEvent(e);
-}
-
-void ResultsYoutube::enqueue()
-{
-	playOrEnqueue("enqueue", currentItem());
-}
-void ResultsYoutube::playCurrentEntry()
-{
-	playOrEnqueue("open", currentItem());
-}
 void ResultsYoutube::playEntry(QTreeWidgetItem *tWI)
 {
 	playOrEnqueue("open", tWI);
@@ -241,85 +140,65 @@ void ResultsYoutube::openPage()
 {
 	QTreeWidgetItem *tWI = currentItem();
 	if (tWI)
-	{
-		if (tWI->parent())
-			tWI = tWI->parent();
 		QDesktopServices::openUrl(tWI->data(0, Qt::UserRole).toString());
-	}
 }
 void ResultsYoutube::copyPageURL()
 {
 	QTreeWidgetItem *tWI = currentItem();
 	if (tWI)
 	{
-		if (tWI->parent())
-			tWI = tWI->parent();
 		QMimeData *mimeData = new QMimeData;
 		mimeData->setText(tWI->data(0, Qt::UserRole).toString());
 		QApplication::clipboard()->setMimeData(mimeData);
 	}
 }
-void ResultsYoutube::copyStreamURL()
-{
-	const QString streamUrl = sender()->property("StreamUrl").toString();
-	if (!streamUrl.isEmpty())
-	{
-		QMimeData *mimeData = new QMimeData;
-		mimeData->setText(streamUrl);
-		QApplication::clipboard()->setMimeData(mimeData);
-	}
-}
 
 void ResultsYoutube::contextMenu(const QPoint &point)
 {
 	menu->clear();
 	QTreeWidgetItem *tWI = currentItem();
-	if (tWI)
+	if (!tWI)
+		return;
+
+	const QString name = tWI->text(0);
+	const QString url = tWI->data(0, Qt::UserRole).toString();
+
+	for (int i = 0; i < 2; ++i)
 	{
-		const bool isOK = !tWI->isDisabled();
-		if (isOK)
+		menu->addSection(i == 0 ? tr("Audio and video") : tr("Audio only"));
+
+		if (!tWI->isDisabled())
 		{
-			menu->addAction(tr("Enqueue"), this, SLOT(enqueue()));
-			menu->addAction(tr("Play"), this, SLOT(playCurrentEntry()));
+			const auto param = i == 0 ? QString() : QString("audio");
+			menu->addAction(tr("Enqueue"), this, [=] {
+				playOrEnqueue("enqueue", currentItem(), param);
+			});
+			menu->addAction(tr("Play"), this, [=] {
+				playOrEnqueue("open", currentItem(), param);
+			});
 			menu->addSeparator();
 		}
-		menu->addAction(tr("Open the page in the browser"), this, SLOT(openPage()));
-		menu->addAction(tr("Copy page address"), this, SLOT(copyPageURL()));
-		menu->addSeparator();
-		if (isOK && !isPlaylist(tWI))
+
+		if (i == 0)
 		{
-			QVariant streamUrl;
-			QTreeWidgetItem *tWI_2 = tWI;
-			if (!tWI_2->parent())
-				tWI_2 = getDefaultQuality(tWI_2);
-			if (tWI_2)
-				streamUrl = tWI_2->data(0, Qt::UserRole);
-
-			if (!streamUrl.isNull())
-			{
-				menu->addAction(tr("Copy stream address"), this, SLOT(copyStreamURL()))->setProperty("StreamUrl", streamUrl);
-				menu->addSeparator();
-			}
+			menu->addAction(tr("Open the page in the browser"), this, SLOT(openPage()));
+			menu->addAction(tr("Copy page address"), this, SLOT(copyPageURL()));
+			menu->addSeparator();
+		}
 
-			const QString name = tWI->parent() ? tWI->parent()->text(0) : tWI->text(0);
-			for (QMPlay2Extensions *QMPlay2Ext : QMPlay2Extensions::QMPlay2ExtensionsList())
+		for (QMPlay2Extensions *QMPlay2Ext : QMPlay2Extensions::QMPlay2ExtensionsList())
+		{
+			if (dynamic_cast<YouTube *>(QMPlay2Ext))
+				continue;
+
+			for (QAction *act : QMPlay2Ext->getActions(name, -2, url, "YouTube", i == 0 ? QString() : QString("audio")))
 			{
-				if (!dynamic_cast<YouTube *>(QMPlay2Ext))
-				{
-					QString addressPrefixName, url, param;
-					if (Functions::splitPrefixAndUrlIfHasPluginPrefix(getQMPlay2Url(tWI), &addressPrefixName, &url, &param))
-					{
-						for (QAction *act : QMPlay2Ext->getActions(name, -2, url, addressPrefixName, param))
-						{
-							act->setParent(menu);
-							menu->addAction(act);
-						}
-					}
-				}
+				act->setParent(menu);
+				menu->addAction(act);
 			}
 		}
-		menu->popup(viewport()->mapToGlobal(point));
 	}
+	menu->popup(viewport()->mapToGlobal(point));
 }
 
 /**/
@@ -350,38 +229,6 @@ PageSwitcher::PageSwitcher(QWidget *youTubeW)
 
 /**/
 
-QList<int> *YouTube::getQualityPresets()
-{
-	static QList<int> qualityPresets[QUALITY_PRESETS_COUNT];
-	static bool firstTime = true;
-	if (firstTime)
-	{
-		qualityPresets[_2160p60] << 315 << 299 << 303 << 298 << 302;
-		qualityPresets[_1080p60] << 299 << 303 << 298 << 302;
-		qualityPresets[_720p60] << 298 << 302;
-
-		qualityPresets[_2160p] << 266 << 313 << 137 << 248 << 136 << 247 << 135;
-		qualityPresets[_1080p] << 137 << 248 << 136 << 247 << 135;
-		qualityPresets[_720p] << 136 << 247 << 135;
-		qualityPresets[_480p] << 135;
-
-		//Append also non-60 FPS itags to 60 FPS itags
-		qualityPresets[_2160p60] += qualityPresets[_2160p];
-		qualityPresets[_1080p60] += qualityPresets[_1080p];
-		qualityPresets[_720p60] += qualityPresets[_720p];
-
-		firstTime = false;
-	}
-	return qualityPresets;
-}
-QStringList YouTube::getQualityPresetString(int qualityIdx)
-{
-	QStringList videoItags;
-	for (int itag : getQualityPresets()[qualityIdx])
-		videoItags.append(QString::number(itag));
-	return videoItags;
-}
-
 YouTube::YouTube(Module &module) :
 	completer(new QCompleter(new QStringListModel(this), this)),
 	currPage(1),
@@ -417,10 +264,13 @@ YouTube::YouTube(Module &module) :
 	showSettingsB->setAutoRaise(true);
 
 	QActionGroup *qualityGroup = new QActionGroup(this);
+	qualityGroup->addAction("4320p 60FPS");
 	qualityGroup->addAction("2160p 60FPS");
+	qualityGroup->addAction("1440p 60FPS");
 	qualityGroup->addAction("1080p 60FPS");
 	qualityGroup->addAction("720p 60FPS");
 	qualityGroup->addAction("2160p");
+	qualityGroup->addAction("1440p");
 	qualityGroup->addAction("1080p");
 	qualityGroup->addAction("720p");
 	qualityGroup->addAction("480p");
@@ -429,12 +279,18 @@ YouTube::YouTube(Module &module) :
 	int qualityIdx = 0;
 	for (QAction *act : qualityGroup->actions())
 	{
-		connect(act, SIGNAL(triggered(bool)), this, SLOT(setQualityFromMenu()));
-		act->setObjectName(QString::number(qualityIdx++));
+		connect(act, &QAction::triggered, this, [=] {
+			sets().set("YouTube/QualityPreset", act->text());
+		});
+		connect(act, &QAction::toggled, this, [=](bool checked) {
+			if (checked)
+				setItags(qualityIdx);
+		});
 		act->setCheckable(true);
 		qualityMenu->addAction(act);
+		++qualityIdx;
 	}
-	qualityMenu->insertSeparator(qualityMenu->actions().at(3));
+	qualityMenu->insertSeparator(qualityMenu->actions().at(5));
 
 	QToolButton *qualityB = new QToolButton;
 	qualityB->setPopupMode(QToolButton::InstantPopup);
@@ -468,94 +324,28 @@ YouTube::YouTube(Module &module) :
 YouTube::~YouTube()
 {}
 
-ItagNames YouTube::getItagNames(const QStringList &itagList, MediaType mediaType)
+bool YouTube::set()
 {
-	if (g_itagArr.isEmpty())
+	const auto qualityActions = m_qualityGroup->actions();
+	const auto qualityText = sets().getString("YouTube/QualityPreset");
+	bool qualityActionChecked = false;
+	if (!qualityText.isEmpty())
 	{
-		/* Video + Audio */
-		g_itagArr[43] = "360p WebM (VP8 + Vorbis 128kbps)";
-		g_itagArr[36] = "180p MP4 (MPEG4 + AAC 32kbps)";
-		g_itagArr[22] = "720p MP4 (H.264 + AAC 192kbps)"; //default
-		g_itagArr[18] = "360p MP4 (H.264 + AAC 96kbps)";
-		g_itagArr[ 5] = "240p FLV (FLV + MP3 64kbps)";
-
-		/* Video */
-		g_itagArr[247] = "Video  720p (VP9)";
-		g_itagArr[248] = "Video 1080p (VP9)";
-		g_itagArr[271] = "Video 1440p (VP9)";
-		g_itagArr[313] = "Video 2160p (VP9)";
-		g_itagArr[272] = "Video 4320p/2160p (VP9)";
-
-		g_itagArr[302] = "Video  720p 60fps (VP9)";
-		g_itagArr[303] = "Video 1080p 60fps (VP9)";
-		g_itagArr[308] = "Video 1440p 60fps (VP9)";
-		g_itagArr[315] = "Video 2160p 60fps (VP9)";
-
-		g_itagArr[298] = "Video  720p 60fps (H.264)";
-		g_itagArr[299] = "Video 1080p 60fps (H.264)";
-
-		g_itagArr[135] = "Video  480p (H.264)";
-		g_itagArr[136] = "Video  720p (H.264)";
-		g_itagArr[137] = "Video 1080p (H.264)";
-		g_itagArr[264] = "Video 1440p (H.264)";
-		g_itagArr[266] = "Video 2160p (H.264)";
-
-		g_itagArr[170] = "Video  480p (VP8)";
-		g_itagArr[168] = "Video  720p (VP8)";
-		g_itagArr[170] = "Video 1080p (VP8)";
-
-		/* Audio */
-		g_itagArr[139] = "Audio (AAC 48kbps)";
-		g_itagArr[140] = "Audio (AAC 128kbps)";
-		g_itagArr[141] = "Audio (AAC 256kbps)"; //?
-
-		g_itagArr[171] = "Audio (Vorbis 128kbps)";
-		g_itagArr[172] = "Audio (Vorbis 256kbps)"; //?
-
-		g_itagArr[249] = "Audio (Opus 50kbps)";
-		g_itagArr[250] = "Audio (Opus 70kbps)";
-		g_itagArr[251] = "Audio (Opus 160kbps)";
-	}
-
-	ItagNames itagPair;
-	for (auto it = g_itagArr.constBegin(), it_end = g_itagArr.constEnd(); it != it_end; ++it)
-	{
-		switch (mediaType)
+		for (auto &&qualityAction : qualityActions)
 		{
-			case MEDIA_AV:
-				if (it.value().startsWith("Video") || it.value().startsWith("Audio"))
-					continue;
-				break;
-			case MEDIA_VIDEO:
-				if (!it.value().startsWith("Video"))
-					continue;
-				break;
-			case MEDIA_AUDIO:
-				if (!it.value().startsWith("Audio"))
-					continue;
+			if (qualityAction->text() == qualityText)
+			{
+				qualityAction->setChecked(true);
+				qualityActionChecked = true;
 				break;
-		}
-		itagPair.first += it.value();
-		itagPair.second += it.key();
-	}
-	for (int i = 0, j = 0; i < itagList.count(); ++i)
-	{
-		const int idx = itagPair.second.indexOf(itagList[i].toInt());
-		if (idx > -1)
-		{
-			itagPair.first.swap(j, idx);
-			itagPair.second.swap(j, idx);
-			++j;
+			}
 		}
 	}
-	return itagPair;
-}
+	if (!qualityActionChecked)
+		qualityActions[3]->setChecked(true);
 
-bool YouTube::set()
-{
-	setItags();
-	resultsW->setColumnCount(sets().getBool("YouTube/ShowAdditionalInfo") ? 3 : 1);
-	subtitles = sets().getBool("YouTube/Subtitles");
+	resultsW->setColumnCount(sets().getBool("YouTube/ShowUserName") ? 3 : 2);
+	m_allowSubtitles = sets().getBool("YouTube/Subtitles");
 	youtubedl = sets().getString("YouTube/youtubedl");
 	if (youtubedl.isEmpty())
 		youtubedl = "youtube-dl";
@@ -587,24 +377,18 @@ void YouTube::convertAddress(const QString &prefix, const QString &url, const QS
 			*icon = youtubeIcon;
 		if (ioCtrl && (stream_url || name))
 		{
-			NetworkAccess net;
-			net.setMaxDownloadSize(0x200000 /* 2 MiB */);
-
-			IOController<NetworkReply> &netReply = ioCtrl->toRef<NetworkReply>();
-			if (net.startAndWait(netReply, url))
+			auto &youTubeDl = ioCtrl->toRef<YouTubeDL>();
+			const QStringList youTubeVideo = getYouTubeVideo(param, url, youTubeDl);
+			if (youTubeVideo.count() == 3)
 			{
-				const QStringList youTubeVideo = getYouTubeVideo(netReply->readAll(), param, nullptr, url, ioCtrl->toPtr<YouTubeDL>());
-				if (youTubeVideo.count() == 3)
-				{
-					if (stream_url)
-						*stream_url = youTubeVideo[0];
-					if (name)
-						*name = youTubeVideo[2];
-					if (extension)
-						*extension = youTubeVideo[1];
-				}
+				if (stream_url)
+					*stream_url = youTubeVideo[0];
+				if (name && !youTubeVideo[2].isEmpty())
+					*name = youTubeVideo[2];
+				if (extension)
+					*extension = youTubeVideo[1];
 			}
-			netReply.clear();
+			youTubeDl.reset();
 		}
 	}
 	else if (prefix == "youtube-dl")
@@ -613,10 +397,10 @@ void YouTube::convertAddress(const QString &prefix, const QString &url, const QS
 			*icon = videoIcon;
 		if (ioCtrl)
 		{
-			IOController<YouTubeDL> &youtube_dl = ioCtrl->toRef<YouTubeDL>();
+			IOController<YouTubeDL> &youTubeDL = ioCtrl->toRef<YouTubeDL>();
 			if (ioCtrl->assign(new YouTubeDL))
 			{
-				youtube_dl->addr(url, param, stream_url, name, extension);
+				youTubeDL->addr(url, param, stream_url, name, extension);
 				ioCtrl->clear();
 			}
 		}
@@ -725,15 +509,16 @@ void YouTube::netFinished(NetworkReply *reply)
 	{
 		QTreeWidgetItem *tWI = ((QTreeWidgetItem *)reply->property("tWI").value<void *>());
 		const QByteArray replyData = reply->readAll();
-		if (reply == autocompleteReply)
+		{
 			setAutocomplete(replyData);
+		}
 		else if (reply == searchReply)
+		{
 			setSearchResults(replyData);
+		}
 		else if (linkReplies.contains(reply))
 		{
-			if (!isPlaylist(tWI))
-				getYouTubeVideo(replyData, QString(), tWI);
-			else
+			if (isPlaylist(tWI))
 				preparePlaylist(replyData, tWI);
 		}
 		else if (imageReplies.contains(reply))
@@ -761,7 +546,7 @@ void YouTube::netFinished(NetworkReply *reply)
 	reply->deleteLater();
 }
 
-void YouTube::searchMenu()
+void YouTube::setItags(int qualityIdx)
 {
 	const QString name = sender()->property("name").toString();
 	if (!name.isEmpty())
@@ -776,31 +561,118 @@ void YouTube::searchMenu()
 
 void YouTube::setItags()
 {
-	resultsW->itagsVideo = YouTube::getItagNames(sets().getStringList("YouTube/ItagVideoList"), YouTube::MEDIA_VIDEO).second;
-	resultsW->itagsAudio = YouTube::getItagNames(sets().getStringList("YouTube/ItagAudioList"), YouTube::MEDIA_AUDIO).second;
-	resultsW->itags = YouTube::getItagNames(sets().getStringList("YouTube/ItagList"), YouTube::MEDIA_AV).second;
-	multiStream = sets().getBool("YouTube/MultiStream");
+#if 0 // Itag info (incomplete)
+	Video + Audio:
+	43 = 360p WebM (VP8 + Vorbis 128kbps)
+	36 = 180p MP4 (MPEG4 + AAC 32kbps)
+	22 = 720p MP4 (H.264 + AAC 192kbps)
+	18 = 360p MP4 (H.264 + AAC 96kbps)
+	 5 = 240p FLV (FLV + MP3 64kbps)
+
+	Video only:
+	247 = Video  720p (VP9)
+	248 = Video 1080p (VP9)
+	271 = Video 1440p (VP9)
+	313 = Video 2160p (VP9)
+	272 = Video 4320p/2160p (VP9)
+
+	302 = Video  720p 60fps (VP9)
+	303 = Video 1080p 60fps (VP9)
+	308 = Video 1440p 60fps (VP9)
+	315 = Video 2160p 60fps (VP9)
+
+	298 = Video  720p 60fps (H.264)
+	299 = Video 1080p 60fps (H.264)
+
+	135 = Video  480p (H.264)
+	136 = Video  720p (H.264)
+	137 = Video 1080p (H.264)
+	264 = Video 1440p (H.264)
+	266 = Video 2160p (H.264)
+
+	170 = Video  480p (VP8)
+	168 = Video  720p (VP8)
+	170 = Video 1080p (VP8)
+
+	Audio only:
+	139 = Audio (AAC 48kbps)
+	140 = Audio (AAC 128kbps)
+	141 = Audio (AAC 256kbps) //?
+
+	171 = Audio (Vorbis 128kbps)
+	172 = Audio (Vorbis 256kbps) //?
+
+	249 = Audio (Opus 50kbps)
+	250 = Audio (Opus 70kbps)
+	251 = Audio (Opus 160kbps)
+#endif
+
+	enum
+	{
+		_4320p60,
+		_2160p60,
+		_1440p60,
+		_1080p60,
+		_720p60,
+		_2160p,
+		_1440p,
+		_1080p,
+		_720p,
+		_480p,
+		QualityPresetsCount,
+	};
 
-	if (multiStream)
+	QList<int> qualityPresets[QualityPresetsCount];
 	{
-		const bool audioOK = (resultsW->itagsAudio.count() >= 2 && (resultsW->itagsAudio.at(0) == 251 || resultsW->itagsAudio.at(0) == 171));
-		if (audioOK)
-		{
-			for (int i = 0; i < QUALITY_PRESETS_COUNT; ++i)
-			{
-				const QList<int> *qualityPresets = getQualityPresets();
-				if (resultsW->itagsVideo.mid(0, qualityPresets[i].count()) == qualityPresets[i])
-				{
-					qualityMenu->actions().at(i > _720p60 ? i + 1 : i /* Avoid separator */)->setChecked(true);
-					return;
-				}
-			}
-		}
+		qualityPresets[_720p60]  << 298 << 302;
+		qualityPresets[_1080p60] << 299 << 303 << qualityPresets[_720p60];
+		qualityPresets[_1440p60] << 308 << qualityPresets[_1080p60];
+		qualityPresets[_2160p60] << 315 << qualityPresets[_1440p60];
+		qualityPresets[_4320p60] << 272 << qualityPresets[_2160p60];
+
+		qualityPresets[_480p]  << 135 << 134 << 133;
+		qualityPresets[_720p]  << 136 << 247 << qualityPresets[_480p];
+		qualityPresets[_1080p] << 137 << 248 << qualityPresets[_720p];
+		qualityPresets[_1440p] << 264 << 271 << qualityPresets[_1080p];
+		qualityPresets[_2160p] << 266 << 313 << qualityPresets[_1440p];
+
+		// Append also non-60 FPS itags to 60 FPS itags
+		qualityPresets[_720p60]  += qualityPresets[_720p];
+		qualityPresets[_1080p60] += qualityPresets[_1080p];
+		qualityPresets[_1440p60] += qualityPresets[_1440p];
+		qualityPresets[_2160p60] += qualityPresets[_2160p];
+		qualityPresets[_4320p60] += qualityPresets[_2160p];
+	}
+
+	QList<int> liveQualityPresets[QualityPresetsCount];
+	{
+		liveQualityPresets[_720p60]  << 300;
+		liveQualityPresets[_1080p60] << 301 << liveQualityPresets[_720p60];
+		liveQualityPresets[_1440p60] << liveQualityPresets[_1080p60];
+		liveQualityPresets[_2160p60] << liveQualityPresets[_1440p60];
+		liveQualityPresets[_4320p60] << liveQualityPresets[_2160p60];
+
+		liveQualityPresets[_480p]  << 94 << 93 << 92 << 91;
+		liveQualityPresets[_720p]  << 95 << liveQualityPresets[_480p];
+		liveQualityPresets[_1080p] << 96 << liveQualityPresets[_720p];
+		liveQualityPresets[_1440p] << 265 << liveQualityPresets[_1080p];
+		liveQualityPresets[_2160p] << 267 << liveQualityPresets[_1440p];
+
+		// Append also non-60 FPS itags to 60 FPS itags
+		liveQualityPresets[_720p60]  += liveQualityPresets[_720p];
+		liveQualityPresets[_1080p60] += liveQualityPresets[_1080p];
+		liveQualityPresets[_1440p60] += liveQualityPresets[_1440p];
+		liveQualityPresets[_2160p60] += liveQualityPresets[_2160p];
+		liveQualityPresets[_4320p60] += liveQualityPresets[_2160p];
 	}
 
-	for (QAction *act : qualityMenu->actions())
-		if (act->isChecked())
-			act->setChecked(false);
+	QMutexLocker locker(&m_itagsMutex);
+	m_videoItags = qualityPresets[qualityIdx];
+	m_audioItags = {251, 171, 140, 250, 249};
+	m_hlsItags = liveQualityPresets[qualityIdx];
+	m_singleUrlItags = {43, 18};
+	if (qualityIdx != _480p)
+		m_singleUrlItags.prepend(22);
 }
 
 void YouTube::deleteReplies()
@@ -825,87 +697,97 @@ void YouTube::setAutocomplete(const QByteArray &data)
 void YouTube::setSearchResults(const QByteArray &data)
 {
 	const auto json = getYtInitialData(data);
-	const auto contents = json.object()
+	const auto sectionListRendererContents = json.object()
 		["contents"].toObject()
 		["twoColumnSearchResultsRenderer"].toObject()
 		["primaryContents"].toObject()
 		["sectionListRenderer"].toObject()
-		["contents"].toArray().at(0).toObject()
-		["itemSectionRenderer"].toObject()
 		["contents"].toArray()
 	;
-	for (auto &&obj : contents)
+	for (auto &&obj : sectionListRendererContents)
 	{
-		const auto videoRenderer = obj.toObject()["videoRenderer"].toObject();
-		const auto playlistRenderer = obj.toObject()["playlistRenderer"].toObject();
+		const auto contents = obj.toObject()
+			["itemSectionRenderer"].toObject()
+			["contents"].toArray()
+		;
 
-		const bool isVideo = !videoRenderer.isEmpty() && playlistRenderer.isEmpty();
+		for (auto &&obj : contents)
+		{
+			const auto videoRenderer = obj.toObject()["videoRenderer"].toObject();
+			const auto playlistRenderer = obj.toObject()["playlistRenderer"].toObject();
+			const bool isVideo = !videoRenderer.isEmpty() && playlistRenderer.isEmpty();
 
-		QString title, contentId, length, user, publishedTime, viewCount, thumbnail, url;
+			QString title, contentId, length, user, publishTime, viewCount, thumbnail, url;
 
-		if (isVideo)
-		{
-			title = videoRenderer["title"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
-			contentId = videoRenderer["videoId"].toString();
-			if (title.isEmpty() || contentId.isEmpty())
-				continue;
-			length = videoRenderer["lengthText"].toObject()["simpleText"].toString();
-			user = videoRenderer["ownerText"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
-			publishedTime = videoRenderer["publishedTimeText"].toObject()["simpleText"].toString();
-			viewCount = videoRenderer["shortViewCountText"].toObject()["simpleText"].toString();
-			thumbnail = videoRenderer["thumbnail"].toObject()["thumbnails"].toArray().at(0).toObject()["url"].toString();
-			url = YOUTUBE_URL "/watch?v=" + contentId;
-		}
-		else
-		{
-			title = playlistRenderer["title"].toObject()["simpleText"].toString();
-			contentId = playlistRenderer["playlistId"].toString();
-			if (title.isEmpty() || contentId.isEmpty())
-				continue;
+			if (isVideo)
+			{
+				title = videoRenderer["title"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
+				contentId = videoRenderer["videoId"].toString();
+				if (title.isEmpty() || contentId.isEmpty())
+					continue;
 
-			user = playlistRenderer["longBylineText"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
-			thumbnail = playlistRenderer
-				["thumbnailRenderer"].toObject()
-				["playlistVideoThumbnailRenderer"].toObject()
-				["thumbnail"].toObject()
-				["thumbnails"].toArray().at(0).toObject()
-				["url"].toString()
-			;
+				length = videoRenderer["lengthText"].toObject()["simpleText"].toString();
+				user = videoRenderer["ownerText"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
+				publishTime = videoRenderer["publishedTimeText"].toObject()["simpleText"].toString();
+				viewCount = videoRenderer["shortViewCountText"].toObject()["simpleText"].toString();
+				thumbnail = videoRenderer["thumbnail"].toObject()["thumbnails"].toArray().at(0).toObject()["url"].toString();
 
-			url = YOUTUBE_URL "/playlist?list=" + contentId;
-		}
+				url = YOUTUBE_URL "/watch?v=" + contentId;
+			}
+			else
+			{
+				title = playlistRenderer["title"].toObject()["simpleText"].toString();
+				contentId = playlistRenderer["playlistId"].toString();
+				if (title.isEmpty() || contentId.isEmpty())
+					continue;
 
-		auto tWI = new QTreeWidgetItem(resultsW);
+				user = playlistRenderer["longBylineText"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
+				thumbnail = playlistRenderer
+					["thumbnailRenderer"].toObject()
+					["playlistVideoThumbnailRenderer"].toObject()
+					["thumbnail"].toObject()
+					["thumbnails"].toArray().at(0).toObject()
+					["url"].toString()
+				;
 
-		tWI->setText(0, title);
-		tWI->setText(1, isVideo ? length : tr("Playlist"));
-		tWI->setText(2, user);
+				url = YOUTUBE_URL "/playlist?list=" + contentId;
+			}
 
-		QString tooltip;
-		tooltip += QString("%1: %2\n").arg(resultsW->headerItem()->text(0), tWI->text(0));
-		tooltip += QString("%1: %2\n").arg(isVideo ? resultsW->headerItem()->text(1) : tr("Playlist"), isVideo ? tWI->text(1) : tr("yes"));
-		tooltip += QString("%1: %2\n").arg(resultsW->headerItem()->text(2), tWI->text(2));
-		tooltip += QString("%1: %2\n").arg(tr("Published time"), publishedTime);
-		tooltip += QString("%1: %2").arg(tr("View count"), viewCount);
-		tWI->setToolTip(0, tooltip);
+			auto tWI = new QTreeWidgetItem(resultsW);
 
-		tWI->setData(0, Qt::UserRole, url);
-		tWI->setData(1, Qt::UserRole, !isVideo);
+			tWI->setText(0, title);
+			tWI->setText(1, isVideo ? length : tr("Playlist"));
+			tWI->setText(2, user);
 
-		if (!isVideo)
-		{
-			tWI->setDisabled(true);
+			QString tooltip;
+			tooltip += QString("%1: %2\n").arg(resultsW->headerItem()->text(0), tWI->text(0));
+			tooltip += QString("%1: %2\n").arg(isVideo ? resultsW->headerItem()->text(1) : tr("Playlist"), isVideo ? tWI->text(1) : tr("yes"));
+			tooltip += QString("%1: %2").arg(resultsW->headerItem()->text(2), tWI->text(2));
+			if (isVideo)
+			{
+				tooltip += QString("\n%1: %2\n").arg(tr("Publish time"), publishTime);
+				tooltip += QString("%1: %2").arg(tr("View count"), viewCount);
+			}
+			tWI->setToolTip(0, tooltip);
 
-			auto linkReply = net.start(url);
-			linkReply->setProperty("tWI", QVariant::fromValue((void *)tWI));
-			linkReplies += linkReply;
-		}
+			tWI->setData(0, Qt::UserRole, url);
+			tWI->setData(1, Qt::UserRole, !isVideo);
 
-		if (!thumbnail.isEmpty())
-		{
-			auto imageReply = net.start(thumbnail);
-			imageReply->setProperty("tWI", QVariant::fromValue((void *)tWI));
-			imageReplies += imageReply;
+			if (!isVideo)
+			{
+				tWI->setDisabled(true);
+
+				auto *linkReply = net.start(videoInfoLink);
+				linkReply->setProperty("tWI", qVariantFromValue((void *)tWI));
+				linkReplies += linkReply;
+			}
+
+			if (!thumbnail.isEmpty())
+			{
+				auto imageReply = net.start(thumbnail);
+				imageReply->setProperty("tWI", QVariant::fromValue((void *)tWI));
+				imageReplies += imageReply;
+			}
 		}
 	}
 
@@ -919,298 +801,160 @@ void YouTube::setSearchResults(const QByteArray &data)
 	}
 }
 
-QStringList YouTube::getYouTubeVideo(const QString &data, const QString &PARAM, QTreeWidgetItem *tWI, const QString &url, IOController<YouTubeDL> *youtube_dl)
+QStringList YouTube::getYouTubeVideo(const QString &param, const QString &url, IOController<YouTubeDL> &youTubeDL)
 {
-	QString subsUrl;
-	if (subtitles && !tWI)
+	if (!youTubeDL.assign(new YouTubeDL))
+		return {};
+
+	const auto rawOutput = youTubeDL->exec(url, {"--flat-playlist", "--write-sub", "-J"}, nullptr, true, true).value(0).toUtf8();
+	if (rawOutput.isEmpty())
+		return {};
+
+	const auto o = QJsonDocument::fromJson(rawOutput).object();
+	if (o.isEmpty())
+		return {};
+
+	const auto formats = o["formats"].toArray();
+	if (formats.isEmpty())
+		return {};
+
+	const bool hasTitle = !rawErrOutput.contains("Unable to extract video title", Qt::CaseInsensitive);
+	const auto title = hasTitle ? o["title"].toString() : QString();
+
+	const bool audioOnly = (param.compare("audio", Qt::CaseInsensitive) == 0);
+	const bool isLive = o["is_live"].toBool();
+
+	QStringList urls;
+	QStringList exts;
+
+	m_itagsMutex.lock();
+	const auto videoItags = m_videoItags;
+	const auto audioItags = m_audioItags;
+	const auto hlsItags = m_hlsItags;
+	const auto singleUrlItags = m_singleUrlItags;
+	m_itagsMutex.unlock();
+
+	QHash<int, QPair<QString, QString>> itagsData;
+
+	for (auto &&formatVal : formats)
 	{
-		QStringList langCodes;
-		int captionIdx = data.indexOf("caption_tracks\":\"");
-		if (captionIdx > -1)
+		const auto format = formatVal.toObject();
+		if (format.isEmpty())
+			continue;
+
+		const auto protocol = format["protocol"].toString();
+		if (protocol.contains("dash", Qt::CaseInsensitive))
 		{
-			captionIdx += 17;
-			const int captionEndIdx = data.indexOf('"', captionIdx);
-			if (captionEndIdx > -1)
-			{
-				for (const QString &caption : data.mid(captionIdx, captionEndIdx - captionIdx).split(','))
-				{
-					bool isAutomated = false;
-					QString lc;
-					for (const QString &captionParams : caption.split("\\u0026"))
-					{
-						const QStringList paramL = captionParams.split('=');
-						if (paramL.count() == 2)
-						{
-							if (paramL[0] == "lc")
-								lc = paramL[1];
-							else if (paramL[0] == "k")
-								isAutomated = paramL[1].startsWith("asr");
-						}
-					}
-					if (!isAutomated && !lc.isEmpty())
-						langCodes += lc;
-				}
-			}
+			// Skip MP4 DASH, because it doesn't work properly (old comment, is it still valid?)
+			continue;
 		}
-		if (!langCodes.isEmpty())
+
+		const auto itag = format["format_id"].toString().toInt();
+		const auto url = format["url"].toString();
+		const auto ext = format["ext"].toString();
+		if (itag != 0 && !url.isEmpty() && !ext.isEmpty())
+			itagsData[itag] = {url, "." + ext};
+	}
+	auto appendUrl = [&](const QList<int> &itags) {
+		for (auto &&itag : itags)
 		{
-			QStringList simplifiedLangCodes;
-			int idx = url.indexOf("v=");
-			for (const QString &lc : langCodes)
-			{
-				// Remove language suffix after "-" - not supported in QMPlay2
-				const int idx = lc.indexOf('-');
-				if (idx > -1)
-					simplifiedLangCodes += lc.mid(0, idx);
-				else
-					simplifiedLangCodes += lc;
-			}
-			if (idx > -1)
+			auto it = itagsData.constFind(itag);
+			if (it != itagsData.cend())
 			{
-				QString lang = QMPlay2Core.getSettings().getString("SubtitlesLanguage");
-				if (!lang.isEmpty())
-				{
-					// Try to convert full language name into short language code
-					for (int i = QLocale::C + 1; i <= QLocale::LastLanguage; ++i)
-					{
-						const QLocale::Language ll = (QLocale::Language)i;
-						if (lang == QLocale::languageToString(ll))
-						{
-							lang = QLocale(ll).name();
-							const int idx = lang.indexOf('_');
-							if (idx > -1)
-								lang.remove(idx, lang.length() - idx);
-							break;
-						}
-					}
-					const int idx = simplifiedLangCodes.indexOf(lang);
-					if (idx > -1)
-						lang = langCodes.at(idx);
-					else
-						lang.clear();
-				}
-				if (lang.isEmpty())
-				{
-					const int idx = simplifiedLangCodes.indexOf(QMPlay2Core.getLanguage());
-					if (idx > -1)
-						lang = langCodes.at(idx);
-				}
-				if (lang.isEmpty())
-					lang = langCodes.at(0);
-				idx += 2;
-				const int ampIdx = url.indexOf('&', idx);
-				subsUrl = getSubsUrl(lang, url.mid(idx, ampIdx > -1 ? (ampIdx - idx) : -1));
+				urls += it->first;
+				exts += it->second;
+				break;
 			}
 		}
-	}
+	};
 
-	QStringList ret;
-	for (int i = 0; i <= 1; ++i)
+	if (!isLive)
 	{
-		const QString fmts = QString(i ? "adaptive_fmts" : "url_encoded_fmt_stream_map") + "\":\""; //"adaptive_fmts" contains audio or video urls
-		int streamsIdx = data.indexOf(fmts);
-		if (streamsIdx > -1)
-		{
-			streamsIdx += fmts.length();
-			const int streamsEndIdx = data.indexOf('"', streamsIdx);
-			if (streamsEndIdx > -1)
-			{
-				for (const QString &stream : data.mid(streamsIdx, streamsEndIdx - streamsIdx).split(','))
-				{
-					int itag = -1;
-					QString ITAG, URL, Signature;
-					for (const QString &streamParams : stream.split("\\u0026"))
-					{
-						const QStringList paramL = streamParams.split('=');
-						if (paramL.count() == 2)
-						{
-							if (paramL[0] == "itag")
-							{
-								ITAG = "itag=" + paramL[1];
-								itag = paramL[1].toInt();
-							}
-							else if (paramL[0] == "url")
-								URL = unescape(paramL[1]);
-							else if (paramL[0] == "sig")
-								Signature = paramL[1];
-							else if (paramL[0] == "s")
-								Signature = "ENCRYPTED";
-						}
-					}
-
-					if (!URL.isEmpty() && g_itagArr.contains(itag) && (!Signature.isEmpty() || URL.contains("signature")))
-					{
-						if (!Signature.isEmpty())
-							URL += "&signature=" + Signature;
-						if (!tWI)
-						{
-							if (ITAG == PARAM)
-							{
-								ret << URL << getFileExtension(g_itagArr[itag]);
-								++i; //ensures end of the loop
-								break;
-							}
-							else if (PARAM.isEmpty())
-								ret << URL << getFileExtension(g_itagArr[itag]) << QString::number(itag);
-						}
-						else
-						{
-							QTreeWidgetItem *ch = new QTreeWidgetItem(tWI);
-							ch->setText(0, g_itagArr[itag]); //Tekst widoczny, informacje o jakości
-							if (!URL.contains("ENCRYPTED")) //youtube-dl działa za wolno, żeby go tu wykonać
-								ch->setData(0, Qt::UserRole + 0, URL); //Adres do pliku
-							ch->setData(0, Qt::UserRole + 1, ITAG); //Dodatkowy parametr
-							ch->setData(0, Qt::UserRole + 2, itag); //Dodatkowy parametr (jako liczba)
-						}
-					}
-				}
-			}
-		}
+		if (!audioOnly)
+			appendUrl(videoItags);
+		appendUrl(audioItags);
 	}
-
-	if (PARAM.isEmpty() && ret.count() >= 3) //Wyszukiwanie domyślnej jakości
+	if (urls.count() != 1 + (audioOnly ? 0 : 1))
 	{
-		bool forceSingleStream = false;
-		if (multiStream)
-		{
-			const QStringList video = getUrlByItagPriority(resultsW->itagsVideo, ret);
-			const QStringList audio = getUrlByItagPriority(resultsW->itagsAudio, ret);
-			if (video.count() == 2 && audio.count() == 2)
-			{
-				ret = QStringList {
-					"FFmpeg://{[" + video[0] + "][" + audio[0] + "]",
-					"[" + video[1] + "][" + audio[1] + "]"
-				};
-				if (!subsUrl.isEmpty())
-				{
-					ret[0] += "[" + subsUrl + "]";
-					ret[1] += "[.vtt]";
-				}
-				ret[0] += "}";
-			}
-			else
-				forceSingleStream = true;
-		}
-		if (!multiStream || forceSingleStream)
-		{
-			ret = getUrlByItagPriority(resultsW->itags, ret);
-			if (ret.count() == 2 && !subsUrl.isEmpty())
-			{
-				ret[0] = "FFmpeg://{[" + ret[0] + "][" + subsUrl + "]}";
-				ret[1] = "[" + ret[1] + "][.vtt]";
-			}
-		}
+		if (!urls.isEmpty())
+			urls.clear();
+		appendUrl(hlsItags);
+		if (urls.isEmpty())
+			appendUrl(singleUrlItags);
 	}
 
-	if (tWI) //Włącza item
-		tWI->setDisabled(false);
-	else if (ret.count() == 2) //Pobiera tytuł
+	if (urls.isEmpty())
 	{
-		int ytplayerIdx = data.indexOf("ytplayer.config");
-		if (ytplayerIdx > -1)
-		{
-			int titleIdx = data.indexOf("title\":\"", ytplayerIdx);
-			if (titleIdx > -1)
-			{
-				int titleEndIdx = titleIdx += 8;
-				for (;;) //szukanie końca tytułu
-				{
-					titleEndIdx = data.indexOf('"', titleEndIdx);
-					if (titleEndIdx < 0 || data[titleEndIdx-1] != '\\')
-						break;
-					++titleEndIdx;
-				}
-				if (titleEndIdx > -1)
-					ret << fromU(data.mid(titleIdx, titleEndIdx - titleIdx).replace("\\\"", "\"").replace("\\/", "/"));
-			}
-		}
-		if (ret.count() == 2)
-			ret << g_cantFindTheTitle;
+		qCritical() << "YouTube :: Can't find desired format, available:" << itagsData.keys();
+		return {};
 	}
 
-	if (ret.count() == 3 && ret.at(0).contains("ENCRYPTED"))
+	const auto subtitles = o["subtitles"].toObject();
+	QString lang = QMPlay2Core.getSettings().getString("SubtitlesLanguage");
+	if (!audioOnly && m_allowSubtitles && !subtitles.isEmpty() && !lang.isEmpty())
 	{
-		if (ret.at(0).contains("itag=") && youtube_dl->assign(new YouTubeDL))
+		// Try to convert full language name into short language code
+		for (int i = QLocale::C + 1; i <= QLocale::LastLanguage; ++i)
 		{
-			int itagsCount = 0;
-			QString itags;
-			for (const QString &ITAG : ret.at(0).split("itag=", QString::SkipEmptyParts))
-			{
-				const int itag = atoi(ITAG.toLatin1());
-				if (itag > 0)
-				{
-					itags += QString::number(itag) + ",";
-					++itagsCount;
-				}
-			}
-			itags.chop(1);
-
-			const QStringList ytdl_stdout = (*youtube_dl)->exec(url, {"-f", itags});
-			if (ytdl_stdout.count() != itagsCount)
-				ret.clear();
-			else
+			const QLocale::Language ll = (QLocale::Language)i;
+			if (lang == QLocale::languageToString(ll))
 			{
-				if (itagsCount == 1 && subsUrl.isEmpty())
-					ret[0] = ytdl_stdout[0];
-				else
-				{
-					ret[0] = "FFmpeg://{";
-					for (const QString &url : ytdl_stdout)
-						ret[0] += "[" + url + "]";
-					if (!subsUrl.isEmpty())
-						ret[0] += "[" + subsUrl + "]";
-					ret[0] += "}";
-				}
+				lang = QLocale(ll).name();
+				const int idx = lang.indexOf('_');
+				if (idx > -1)
+					lang.remove(idx, lang.length() - idx);
+				break;
 			}
-			youtube_dl->clear();
 		}
-	}
-	else if (!tWI && ret.isEmpty() && youtube_dl->assign(new YouTubeDL)) //cannot find URL at normal way
-	{
-		QString stream_url, name, extension;
-		QString cleanUrl = url;
-		const int idx = cleanUrl.indexOf("v=");
-		if (idx > -1)
-		{
-			const int ampIdx = cleanUrl.indexOf('&');
-			cleanUrl = YOUTUBE_URL "/watch?" + cleanUrl.mid(idx, ampIdx > -1 ? (ampIdx - idx) : -1);
-		}
-		(*youtube_dl)->addr(cleanUrl, PARAM.right(PARAM.length() - 5), &stream_url, &name, &extension); //extension doesn't work on youtube in this function
-		if (!stream_url.isEmpty())
+
+		auto subtitlesForLang = subtitles[lang].toArray();
+		if (subtitlesForLang.isEmpty())
+			subtitlesForLang = subtitles[QMPlay2Core.getLanguage()].toArray();
+
+		for (auto &&subtitlesFmtVal : asConst(subtitlesForLang))
 		{
-			if (name.isEmpty())
-				name = g_cantFindTheTitle;
-			ret << stream_url << extension << name;
+			const auto subtitlesFmt = subtitlesFmtVal.toObject();
+			if (subtitlesFmt.isEmpty())
+				continue;
+
+			const auto ext = subtitlesFmt["ext"].toString();
+			if (ext != "vtt")
+				continue;
+
+			const auto url = subtitlesFmt["url"].toString();
+			if (url.isEmpty())
+				continue;
+
+			urls += url;
+			exts += ".vtt";
+			break;
 		}
-		youtube_dl->clear();
 	}
 
-	return ret;
-}
-QStringList YouTube::getUrlByItagPriority(const QList<int> &itags, QStringList ret)
-{
-	for (int itag : itags)
+	Q_ASSERT(!urls.isEmpty());
+	Q_ASSERT(urls.count() == exts.count());
+
+	QStringList result;
+	if (urls.count() == 1)
+		result += urls.at(0);
+		result += exts.at(0);
+	else
 	{
-		bool br = false;
-		for (int i = 2; i < ret.count(); i += 3)
-			if (ret.at(i).toInt() == itag)
-			{
-				if (i != 2)
-				{
-					ret[0] = ret.at(i-2); //URL
-					ret[1] = ret.at(i-1); //Extension
-					ret[2] = ret.at(i-0); //Itag
-				}
-				br = true;
-				break;
-			}
-		if (br)
-			break;
+		QString url = "FFmpeg://{";
+		for (auto &&urlPart : asConst(urls))
+			url += "[" + urlPart + "]";
+		url += "}";
+
+		QString ext;
+		for (auto &&extPart : asConst(exts))
+			ext += "[" + extPart + "]";
+
+		result += url;
+		result += ext;
 	}
-	if (!itags.contains(ret.at(2).toInt()))
-		return {};
-	ret.erase(ret.begin()+2, ret.end());
-	return ret;
+	result += title;
+
+	return result;
 }
 
 void YouTube::preparePlaylist(const QByteArray &data, QTreeWidgetItem *tWI)
@@ -1233,7 +977,7 @@ void YouTube::preparePlaylist(const QByteArray &data, QTreeWidgetItem *tWI)
 	for (auto &&obj : contents)
 	{
 		const auto playlistRenderer = obj.toObject()["playlistVideoRenderer"].toObject();
-		const auto title = playlistRenderer["title"].toObject()["simpleText"].toString();
+		const auto title = playlistRenderer["title"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
 		const auto videoId = playlistRenderer["videoId"].toString();
 		if (title.isEmpty() || videoId.isEmpty())
 			continue;
@@ -1257,9 +1001,11 @@ QJsonDocument YouTube::getYtInitialData(const QByteArray &data)
 	idx = data.indexOf("{", idx);
 	if (idx < 0)
 		return QJsonDocument();
-	int idx2 = Functions::findJsonEnd(data, idx);
-	if (idx2 < 0)
-		return QJsonDocument();
-	const auto jsonData = data.mid(idx, idx2 - idx);
-	return QJsonDocument::fromJson(jsonData);
+	QJsonParseError e = {};
+	auto jsonDoc = QJsonDocument::fromJson(data.mid(idx), &e);
+	if (Q_UNLIKELY(e.error == QJsonParseError::NoError))
+		return jsonDoc;
+	if (e.error == QJsonParseError::GarbageAtEnd && e.offset > 0)
+		return QJsonDocument::fromJson(data.mid(idx, e.offset));
+	return QJsonDocument();
 }
diff --git a/src/modules/Extensions/YouTube.hpp b/src/modules/Extensions/YouTube.hpp
index 9070b408..9f946c6c 100644
--- a/src/modules/Extensions/YouTube.hpp
+++ b/src/modules/Extensions/YouTube.hpp
@@ -24,7 +24,7 @@
 
 #include <QTreeWidget>
 #include <QPointer>
-#include <QMap>
+#include <QMutex>
 #include <QJsonDocument.h>
 
 class QProgressBar;
@@ -44,27 +44,18 @@ class ResultsYoutube : public QTreeWidget
 	Q_OBJECT
 public:
 	ResultsYoutube();
-	~ResultsYoutube() final;
+	~ResultsYoutube();
 
-	QList<int> itags, itagsVideo, itagsAudio;
 private:
-	QTreeWidgetItem *getDefaultQuality(const QTreeWidgetItem *tWI);
-
-	void playOrEnqueue(const QString &param, QTreeWidgetItem *tWI);
-
-	void mouseMoveEvent(QMouseEvent *) override final;
-	void mouseReleaseEvent(QMouseEvent *) override final;
+	void playOrEnqueue(const QString &param, QTreeWidgetItem *tWI, const QString &addrParam = QString());
 
 	QMenu *menu;
-	int pixels;
+
 private slots:
-	void enqueue();
-	void playCurrentEntry();
 	void playEntry(QTreeWidgetItem *tWI);
 
 	void openPage();
 	void copyPageURL();
-	void copyStreamURL();
 
 	void contextMenu(const QPoint &p);
 };
@@ -90,20 +81,12 @@ class YouTube : public QWidget, public QMPlay2Extensions
 	Q_OBJECT
 
 public:
-	enum QUALITY_PRESETS {_2160p60, _1080p60, _720p60, _2160p, _1080p, _720p, _480p, QUALITY_PRESETS_COUNT};
-
-	static QList<int> *getQualityPresets();
-	static QStringList getQualityPresetString(int qualityIdx);
-
 	YouTube(Module &module);
-	~YouTube() final;
+	~YouTube();
 
-	enum MediaType {MEDIA_AV, MEDIA_VIDEO, MEDIA_AUDIO};
-	static ItagNames getItagNames(const QStringList &itagList, MediaType mediaType);
+	bool set() override;
 
-	bool set() override final;
-
-	DockWidget *getDockWidget() override final;
+	DockWidget *getDockWidget() override;
 
 	QList<AddressPrefix> addressPrefixList(bool) const override final;
 	void convertAddress(const QString &, const QString &, const QString &, QString *, QString *, QIcon *, QString *, IOController<> *ioCtrl) override final;
@@ -128,15 +111,14 @@ private slots:
 	void searchMenu();
 
 private:
-	void setItags();
+	void setItags(int qualityIdx);
 
 	void deleteReplies();
 
 	void setAutocomplete(const QByteArray &data);
 	void setSearchResults(const QByteArray &data);
 
-	QStringList getYouTubeVideo(const QString &data, const QString &PARAM = QString(), QTreeWidgetItem *tWI = nullptr, const QString &url = QString(), IOController<YouTubeDL> *youtube_dl = nullptr); //jeżeli (tWI == nullptr) to zwraca {URL, file_extension, TITLE}
-	QStringList getUrlByItagPriority(const QList<int> &itags, QStringList ret);
+	QStringList getYouTubeVideo(const QString &param, const QString &url, IOController<YouTubeDL> &youTubeDL);
 
 	void preparePlaylist(const QByteArray &data, QTreeWidgetItem *tWI);
 
@@ -162,7 +144,14 @@ private:
 	NetworkAccess net;
 
 	QString youtubedl;
-	bool multiStream, subtitles;
+	bool m_allowSubtitles;
+
+	QActionGroup *m_qualityGroup = nullptr, *m_sortByGroup = nullptr;
+
+	int m_sortByIdx = 0;
+
+	QMutex m_itagsMutex;
+	QList<int> m_videoItags, m_audioItags, m_hlsItags, m_singleUrlItags;
 };
 
 #define YouTubeName "YouTube Browser"
diff --git a/src/qmplay2/Functions.cpp b/src/qmplay2/Functions.cpp
index 03ec70ee..35e59931 100644
--- a/src/qmplay2/Functions.cpp
+++ b/src/qmplay2/Functions.cpp
@@ -912,34 +912,3 @@ QByteArray Functions::decryptAes256Cbc(const QByteArray &password, const QByteAr
 	deciphered.resize(decryptedLen + finalizeLen);
 	return deciphered;
 }
-
-int Functions::findJsonEnd(const QByteArray &data, int idx)
-{
-	const int dataLen = data.length();
-	if (dataLen < 1 || idx < 0 || idx >= dataLen || data.at(idx) != '{')
-		return -1;
-	int brackets = 1;
-	bool inString = false;
-	char prevChr = '\0';
-	for (int i = idx + 1; i < dataLen; ++i)
-	{
-		const char chr = data.at(i);
-		if (chr == '"')
-		{
-			if (!inString)
-				inString = true;
-			else if (prevChr != '\\')
-				inString = false;
-		}
-		prevChr = chr;
-		if (inString)
-			continue;
-		if (chr == '{')
-			++brackets;
-		else if (chr == '}')
-			--brackets;
-		if (brackets == 0)
-			return i + 1;
-	}
-	return -1;
-}
diff --git a/src/qmplay2/YouTubeDL.cpp b/src/qmplay2/YouTubeDL.cpp
index 98071fea..9da09e79 100644
--- a/src/qmplay2/YouTubeDL.cpp
+++ b/src/qmplay2/YouTubeDL.cpp
@@ -139,7 +139,7 @@ void YouTubeDL::addr(const QString &url, const QString &param, QString *streamUr
 	}
 }
 
-QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString *silentErr, bool canUpdate)
+QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString *silentErr, bool canUpdate, bool rawOutput)
 {
 #ifndef Q_OS_ANDROID
 	enum class Lock
@@ -209,7 +209,15 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
 	if (httpProxy && *httpProxy)
 		commonArgs += {"--proxy", httpProxy};
 
-	m_process.start(ytDlPath, QStringList() << url << "-g" << args << commonArgs << "-j");
+	QStringList processArgs;
+	processArgs += url;
+	if (!rawOutput)
+		processArgs += "-g";
+	processArgs += args;
+	processArgs += commonArgs;
+	if (!rawOutput)
+		processArgs += "-j";
+	m_process.start(ytDlPath, processArgs);
 	if (m_process.waitForFinished() && !m_aborted)
 	{
 		const auto finishWithError = [&](const QString &error) {
@@ -230,25 +238,27 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
 
 		if (isExitOk)
 		{
-			result = QString(m_process.readAllStandardOutput()).split('\n', QString::SkipEmptyParts);
-
-			// Verify if URLs has printable characters, because sometimes we
-			// can get binary garbage at output (especially on Openload).
-			for (const QString &line : result)
+			result = QStringList(m_process.readAllStandardOutput());
+			if (!rawOutput)
 			{
-				if (line.startsWith("http"))
+				result = result[0].split('\n', QString::SkipEmptyParts);
+
+				// Verify if URLs has printable characters, because sometimes we
+				// can get binary garbage at output (especially on Openload).
+				for (const QString &line : asConst(result))
 				{
-					for (const QChar &c : line)
+					if (line.startsWith("http"))
 					{
-						if (!c.isPrint())
+						for (const QChar &c : line)
 						{
-							error = "Invalid stream URL";
-							isExitOk = false;
-							break;
+							if (!c.isPrint())
+							{
+								error = "Invalid stream URL";
+								isExitOk = false;
+								break;
+							}
 						}
 					}
-					if (!isExitOk)
-						break;
 				}
 			}
 		}
@@ -304,13 +314,23 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
 			return {};
 		}
 
-		//[Title], url, JSON, [url, JSON]
-		for (int i = result.count() - 1; i >= 0; --i)
+		if (!rawOutput)
 		{
-			if (i > 0 && result.at(i).startsWith('{'))
+			//[Title], url, JSON, [url, JSON]
+			for (int i = result.count() - 1; i >= 0; --i)
 			{
-				exportCookiesFromJSON(result.at(i), result.at(i - 1));
-				result.removeAt(i);
+				if (i > 0 && result.at(i).startsWith('{'))
+				{
+					const QString url = result.at(i - 1);
+
+					const QJsonDocument json = QJsonDocument::fromJson(result.at(i).toUtf8());
+					for (const QJsonValue &formats : json.object()["formats"].toArray())
+					{
+						if (url == formats.toObject()["url"].toString())
+							QMPlay2Core.addCookies(url, formats.toObject()["http_headers"].toObject()["Cookie"].toString().toUtf8());
+					}
+					result.removeAt(i);
+				}
 			}
 		}
 
diff --git a/src/qmplay2/headers/Functions.hpp b/src/qmplay2/headers/Functions.hpp
index ef4dd090..e74c48f1 100644
--- a/src/qmplay2/headers/Functions.hpp
+++ b/src/qmplay2/headers/Functions.hpp
@@ -158,6 +158,4 @@ namespace Functions
 	void setHeaderSectionResizeMode(QHeaderView *header, int index, int resizeMode);
 
 	QByteArray decryptAes256Cbc(const QByteArray &password, const QByteArray &salt, const QByteArray &ciphered);
-
-	int findJsonEnd(const QByteArray &data, int idx = 0);
 }
diff --git a/src/qmplay2/headers/YouTubeDL.hpp b/src/qmplay2/headers/YouTubeDL.hpp
index 0e4b6e9c..2130c2ad 100644
--- a/src/qmplay2/headers/YouTubeDL.hpp
+++ b/src/qmplay2/headers/YouTubeDL.hpp
@@ -40,7 +40,7 @@ public:
 
 	void addr(const QString &url, const QString &param, QString *streamUrl, QString *name, QString *extension, QString *err = nullptr);
 
-	QStringList exec(const QString &url, const QStringList &args, QString *silentErr = nullptr, bool canUpdate = true);
+	QStringList exec(const QString &url, const QStringList &args, QString *silentErr = nullptr, bool canUpdate = true, bool rawOutput = false);
 
 private:
 	void abort() override final;
-- 
2.47.0

