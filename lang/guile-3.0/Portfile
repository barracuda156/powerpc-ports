# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           xcode_workaround 1.0

# binding_ver represents the API/ABI version, embedded in all paths.
# Don't upgrade this port to a version beyond this; create a new one instead.
set binding_ver     3.0

set my_name         guile
name                ${my_name}-${binding_ver}
version             3.0.9
revision            0

categories          lang
license             LGPL-2.1+
maintainers         {mascguy @mascguy} {barracuda156 gmail.com:vital.had} openmaintainer

description         GNU's Ubiquitous Intelligent Language for Extension (guile)
long_description    Guile is an interpreter for the Scheme programming \
                    language, packaged for use in a wide variety of \
                    environments. Guile implements Scheme as described in \
                    the Revised^5 Report on the Algorithmic Language Scheme \
                    (usually known as R5RS), providing clean and general \
                    data and control structures. \
                    Guile goes beyond the rather austere language presented \
                    in R5RS, extending it with a module system, full access \
                    to POSIX system calls, networking support, multiple \
                    threads, dynamic linking, a foreign function call \
                    interface, powerful string processing, and many other \
                    features needed for programming in the real world.
homepage            https://www.gnu.org/software/guile/guile.html

master_sites        gnu:${my_name}
distname            ${my_name}-${version}
dist_subdir         ${my_name}
use_xz              yes

checksums           rmd160  50534bf521961d08fb1b4fb6e1d5dbefe305a4f3 \
                    sha256  1a2625ac72b2366e95792f3fe758fd2df775b4044a90a4a9787326e66c0d750d \
                    size    5750636

compiler.c_standard 2011

# https://trac.macports.org/ticket/59365
xcode_workaround.fixed_xcode_version 11.2
xcode_workaround.type avoid_xcode_compiler

depends_build-append \
                    port:autoconf \
                    port:automake \
                    port:gettext \
                    port:texinfo

# fixes: sed: -i may not be used with stdin
depends_build-append \
                    port:gsed
configure.env-append \
                    SED=${prefix}/bin/gsed
build.env-append \
                    SED=${prefix}/bin/gsed

# guile-config is a wrapper around pkg-config
depends_lib-append \
                    port:boehmgc \
                    port:gettext-runtime \
                    port:gmp \
                    port:libffi \
                    port:libiconv \
                    port:libtool \
                    port:libunistring \
                    port:ncurses \
                    port:pkgconfig \
                    port:readline

configure.args-append \
                    CPPFLAGS="-I${prefix}/include" \
                    LDFLAGS="-L${prefix}/lib" \
                    --disable-error-on-warning \
                    --disable-silent-rules \
                    --enable-regex \
                    --enable-shared \
                    --infodir="${prefix}/share/info" \
                    --mandir="${prefix}/share/man" \
                    --program-suffix=-${binding_ver}

# configure may err on version mismatch otherwise
patchfiles-append   patch-automake.diff

if {${configure.build_arch} in [list i386 ppc]} {
    patchfiles-append       patch-ppc.diff

    configure.args-append   --without-64-calls
}

# Earlier version failed at destroot:
# /opt/local/lib/guile/2.0/ccache/ice-9/and-let-star.go differs and cannot be merged
# Disable until confirmed to work or fixed.
universal_variant   no

proc darwin_set_host_build {p_arch} {
    global os.major os.platform

    # Map build_arch to arch for configure host/build
    set port_arch_map       [dict create]
    dict set port_arch_map  i386     i686
    dict set port_arch_map  x86_64   x86_64
    dict set port_arch_map  arm64    aarch64
    dict set port_arch_map  ppc      powerpc
    dict set port_arch_map  ppc64    powerpc64

    ui_info "darwin_set_host_build: checking for arch: ${p_arch}"

    if {[dict exists ${port_arch_map} ${p_arch}]} {
        set arch_arg [dict get ${port_arch_map} ${p_arch}]
        ui_info "darwin_set_host_build: arch_map value found: ${arch_arg}"

        configure.args-append \
            --host=${arch_arg}-apple-${os.platform}${os.major} \
            --build=${arch_arg}-apple-${os.platform}${os.major}
    } else {
        ui_info "darwin_set_host_build: arch not found: ${p_arch}"
    }
}

platform darwin {
    darwin_set_host_build ${configure.build_arch}

    if {${os.major} < 11} {
        patchfiles-append   patch-dprintf.diff

        # some of these may work if enabled, feel free to update; threads fails for PPC
        configure.args-append \
                            --disable-lto \
                            --disable-nls \
                            --enable-jit=no \
                            --without-threads

        depends_build-append \
                            port:gmake

        build.cmd           ${prefix}/bin/gmake
    }

    if {${configure.build_arch} eq "ppc"} {
        post-extract {
            # the prebuilt guile binaries are broken for Darwin PPC
            move ${worksrcpath}/prebuilt/32-bit-big-endian ${worksrcpath}/prebuilt/32-bit-big-endian-disabled
            ui_msg "*** This build can take some time, as guile has to do a full bootstrap on PPC."
        }
    }
}

post-destroot {
    set destroot_share ${destroot}${prefix}/share
    set destroot_aclocal ${destroot_share}/aclocal

    move ${destroot_aclocal}/${my_name}.m4 ${destroot_aclocal}/${my_name}-${binding_ver}.m4
}

test.run        yes
test.target     check

livecheck.type  gnu
livecheck.regex "${my_name}-(${binding_ver}(\[0-9\\.\]+))${extract.suffix}"
