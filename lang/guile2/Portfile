# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           xcode_workaround 1.0

name                guile2
set my_name         guile
version             2.2.7
revision            0

categories          lang
license             LGPL-2.1+
maintainers         nomaintainer

description         GNU's Ubiquitous Intelligent Language for Extension (guile)
long_description    Guile is an interpreter for the Scheme programming \
                    language, packaged for use in a wide variety of \
                    environments. Guile implements Scheme as described in \
                    the Revised^5 Report on the Algorithmic Language Scheme \
                    (usually known as R5RS), providing clean and general \
                    data and control structures. \
                    Guile goes beyond the rather austere language presented \
                    in R5RS, extending it with a module system, full access \
                    to POSIX system calls, networking support, multiple \
                    threads, dynamic linking, a foreign function call \
                    interface, powerful string processing, and many other \
                    features needed for programming in the real world.
homepage            https://www.gnu.org/software/guile/guile.html

master_sites        gnu:${my_name}
distname            ${my_name}-${version}
dist_subdir         ${my_name}
use_xz              yes

checksums           rmd160  11d4afb5610afe6e60137f67e1add84be464106b \
                    sha256  cdf776ea5f29430b1258209630555beea6d2be5481f9da4d64986b077ff37504 \
                    size    10881984

compiler.c_standard 2011

# https://trac.macports.org/ticket/59365
xcode_workaround.fixed_xcode_version 11.2
xcode_workaround.type avoid_xcode_compiler

platform darwin powerpc {
    post-extract {
        # the prebuilt guile binaries are broken for 32-bit darwin PPC
        move ${worksrcpath}/prebuilt/32-bit-big-endian ${worksrcpath}/prebuilt/32-bit-big-endian-disabled

        ui_msg "*** This build can take some time, as guile has to do a full bootstrap on PPC."
    }
}

# Failed to destroot guile:
# /opt/local/lib/guile/2.0/ccache/ice-9/and-let-star.go differs and cannot be merged
universal_variant   no

# guile-config is a wrapper around pkg-config
depends_lib-append  port:boehmgc \
                    port:gettext-runtime \
                    port:gmp \
                    port:libffi \
                    port:libiconv \
                    port:libtool \
                    port:libunistring \
                    port:ncurses \
                    port:pkgconfig \
                    port:readline

# fixes: sed: -i may not be used with stdin
depends_build-append \
                    port:gettext \
                    port:gsed
configure.env-append \
                    SED=${prefix}/bin/gsed
build.env-append    SED=${prefix}/bin/gsed

configure.args-append \
                    CPPFLAGS="-I${prefix}/include" \
                    LDFLAGS="-L${prefix}/lib" \
                    --disable-error-on-warning \
                    --disable-silent-rules \
                    --enable-regex \
                    --infodir="${prefix}/share/info" \
                    --mandir="${prefix}/share/man"

# Unable to cross compile, so we need to be able to run the built code
if {${os.arch} eq "i386" && ${os.major} >= 11} {
    supported_archs i386 x86_64
    set universal_archs_supported {i386 x86_64}
} elseif {${os.arch} eq "i386" && ${build_arch} eq "x86_64"} {
    supported_archs i386 x86_64 ppc
    set universal_archs_supported {i386 x86_64 ppc}
} elseif {${os.arch} eq "i386"} {
    supported_archs i386 ppc
    set universal_archs_supported {i386 ppc}
} elseif {${build_arch} eq "ppc64"} {
    supported_archs ppc ppc64
    set universal_archs_supported {ppc ppc64}
} else {
    supported_archs ${build_arch}
    set universal_archs_supported ${build_arch}
}

platform darwin {
#    if {[variant_isset universal]} {
#        set merger_host(x86_64) x86_64-apple-${os.platform}${os.major}
#        set merger_host(i386) i686-apple-${os.platform}${os.major}
#        set merger_host(ppc64) powerpc64-apple-${os.platform}${os.major}
#        set merger_host(ppc) powerpc-apple-${os.platform}${os.major}
#        set merger_configure_args(x86_64) "--build=x86_64-apple-${os.platform}${os.major}"
#        set merger_configure_args(i386) "--build=i686-apple-${os.platform}${os.major}"
#        set merger_configure_args(ppc) "--build=powerpc-apple-${os.platform}${os.major}"
#        set merger_configure_args(ppc64) "--build=powerpc64-apple-${os.platform}${os.major}"
#    } else
    if {${build_arch} eq "i386"} {
        configure.args-append \
            --host=i686-apple-${os.platform}${os.major} \
            --build=i686-apple-${os.platform}${os.major}
    } elseif {${build_arch} eq "x86_64"} {
        configure.args-append \
            --host=x86_64-apple-${os.platform}${os.major} \
            --build=x86_64-apple-${os.platform}${os.major}
    } elseif {${build_arch} eq "ppc"} {
        configure.args-append \
            --host=powerpc-apple-${os.platform}${os.major} \
            --build=powerpc-apple-${os.platform}${os.major}
    } elseif {${build_arch} eq "ppc64"} {
        configure.args-append \
            --host=powerpc64-apple-${os.platform}${os.major} \
            --build=powerpc64-apple-${os.platform}${os.major}
    }
}

post-destroot {
    # Remove conflicting files and rename to make guile2 installable
    # with guile 3.0. Update internal paths and links.
    file delete {*}[glob ${destroot}${prefix}/share/info/guile.info*]
    file delete ${destroot}${prefix}/share/info/r5rs.info

    foreach bin [list "guild" "guile" "guile-config" "guile-snarf" "guile-tools"] {
        file rename ${destroot}${prefix}/bin/${bin} ${destroot}${prefix}/bin/${bin}-2.2
    }

    file rename ${destroot}${prefix}/share/aclocal/guile.m4 ${destroot}${prefix}/share/aclocal/guile2.m4
    file rename ${destroot}${prefix}/share/man/man1/guile.1 ${destroot}${prefix}/share/man/man1/guile2.1

    reinplace "s|${prefix}/bin/guile|${prefix}/bin/guile-2.2|g" ${destroot}${prefix}/bin/guile-config-2.2

    set m4 ${destroot}${prefix}/share/aclocal/guile2.m4
    reinplace "s|GUILE_PROGS|GUILE2_2_PROGS|g" ${m4}
    reinplace "s|GUILE_FLAGS|GUILE2_2_FLAGS|g" ${m4}
    reinplace "s|GUILE_SITE_DIR|GUILE2_2_SITE_DIR|g" ${m4}
    reinplace "s|GUILE_CHECK|GUILE2_2_CHECK|g" ${m4}
    reinplace "s|GUILE_MODULE_|GUILE2_2_MODULE_|g" ${m4}
}

test.run        yes
test.target     check

livecheck.type  gnu
livecheck.regex "${my_name}-(2\\.(\[0-9\\.\]+))${extract.suffix}"
