# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           xcode_workaround 1.0

# binding_ver represents the API/ABI version, embedded in all paths.
# Don't upgrade this port to a version beyond this; create a new one instead.
set binding_ver     2.2

set my_name         guile
name                ${my_name}-${binding_ver}
version             2.2.7
revision            0

categories          lang
license             LGPL-2.1+
maintainers         {mascguy @mascguy} openmaintainer

description         GNU's Ubiquitous Intelligent Language for Extension (guile)
long_description    Guile is an interpreter for the Scheme programming \
                    language, packaged for use in a wide variety of \
                    environments. Guile implements Scheme as described in \
                    the Revised^5 Report on the Algorithmic Language Scheme \
                    (usually known as R5RS), providing clean and general \
                    data and control structures. \
                    Guile goes beyond the rather austere language presented \
                    in R5RS, extending it with a module system, full access \
                    to POSIX system calls, networking support, multiple \
                    threads, dynamic linking, a foreign function call \
                    interface, powerful string processing, and many other \
                    features needed for programming in the real world.
homepage            https://www.gnu.org/software/guile/guile.html

master_sites        gnu:${my_name}
distname            ${my_name}-${version}
dist_subdir         ${my_name}
use_xz              yes

checksums           rmd160  11d4afb5610afe6e60137f67e1add84be464106b \
                    sha256  cdf776ea5f29430b1258209630555beea6d2be5481f9da4d64986b077ff37504 \
                    size    10881984

compiler.c_standard 2011

# https://trac.macports.org/ticket/59365
xcode_workaround.fixed_xcode_version 11.2
xcode_workaround.type avoid_xcode_compiler

platform darwin powerpc {
    post-extract {
        # the prebuilt guile binaries are broken for 32-bit darwin PPC
        move ${worksrcpath}/prebuilt/32-bit-big-endian ${worksrcpath}/prebuilt/32-bit-big-endian-disabled

        ui_msg "*** This build can take some time, as guile has to do a full bootstrap on PPC."
    }
}

# Failed to destroot guile:
# /opt/local/lib/guile/2.0/ccache/ice-9/and-let-star.go differs and cannot be merged
universal_variant   no

# fixes: sed: -i may not be used with stdin
depends_build-append \
                    port:gettext \
                    port:gsed
configure.env-append \
                    SED=${prefix}/bin/gsed
build.env-append \
                    SED=${prefix}/bin/gsed

# guile-config is a wrapper around pkg-config
depends_lib-append \
                    port:boehmgc \
                    port:gettext-runtime \
                    port:gmp \
                    port:libffi \
                    port:libiconv \
                    port:libtool \
                    port:libunistring \
                    port:ncurses \
                    port:pkgconfig \
                    port:readline

configure.args-append \
                    CPPFLAGS="-I${prefix}/include" \
                    LDFLAGS="-L${prefix}/lib" \
                    --disable-error-on-warning \
                    --disable-silent-rules \
                    --enable-regex \
                    --infodir="${prefix}/share/info" \
                    --mandir="${prefix}/share/man" \
                    --program-suffix=-${binding_ver}

proc darwin_set_universal {p_arch_os p_arch_build} {
    global os.major supported_archs universal_archs_supported

    # Unable to cross compile, so we need to be able to run the built code
    if {${os.major} >= 20} {
        set my_archs {arm64 x86_64}
    } elseif {${p_arch_os} eq "i386" && ${os.major} >= 11} {
        set my_archs {i386 x86_64}
    } elseif {${p_arch_os} eq "i386" && ${p_arch_build} eq "x86_64"} {
        set my_archs {i386 x86_64 ppc}
    } elseif {${p_arch_os} eq "i386"} {
        set my_archs {i386 ppc}
    } elseif {${p_arch_build} eq "ppc64"} {
        set my_archs {ppc ppc64}
    } else {
        set my_archs {${p_arch_build}}
    }

    supported_archs               {*}${my_archs}
    set universal_archs_supported {{*}${my_archs}}

    ui_info "darwin_set_universal: result: ${my_archs}"
}

proc darwin_set_host_build {p_arch} {
    global os.major os.platform

    # Map build_arch to arch for configure host/build
    set port_arch_map       [dict create]
    dict set port_arch_map  i386     i686
    dict set port_arch_map  x86_64   x86_64
    dict set port_arch_map  arm64    aarch64
    dict set port_arch_map  ppc      powerpc
    dict set port_arch_map  ppc64    powerpc64

    ui_info "darwin_set_host_build: checking for arch: ${p_arch}"

    if {[dict exists ${port_arch_map} ${p_arch}]} {
        set arch_arg [dict get ${port_arch_map} ${p_arch}]
        ui_info "darwin_set_host_build: arch_map value found: ${arch_arg}"

        configure.args-append \
            --host=${arch_arg}-apple-${os.platform}${os.major} \
            --build=${arch_arg}-apple-${os.platform}${os.major}
    } else {
        ui_info "darwin_set_host_build: arch not found: ${p_arch}"
    }
}

platform darwin {
    darwin_set_universal   ${os.arch} ${configure.build_arch}
    darwin_set_host_build  ${configure.build_arch}
}

post-destroot {
    set destroot_share ${destroot}${prefix}/share
    set destroot_aclocal ${destroot_share}/aclocal
    set destroot_info ${destroot_share}/info

    # Remove conflicting files and rename to make guile2 installable
    # with other guile versions.
    delete {*}[glob ${destroot_info}/${my_name}.info*]
    delete ${destroot_info}/r5rs.info

    move ${destroot_aclocal}/${my_name}.m4 ${destroot_aclocal}/${my_name}-${binding_ver}.m4
}

# This port provides bindings previously provided by 'guile'.
# So the latter must be deactivated first, if installed.
# This logic added 2023-09-25; keep in place for at least 12 months.
pre-activate {
    set port_conflict_name    guile

    if { ![catch {set port_conflict_ver_info [lindex [registry_active ${port_conflict_name}] 0]}] } {
        ui_info "${port_conflict_name} installed; deactivating"
        registry_deactivate_composite ${port_conflict_name} "" [list ports_nodepcheck 1]
    }
}

test.run        yes
test.target     check

livecheck.type  gnu
livecheck.regex "${my_name}-(${binding_ver}(\[0-9\\.\]+))${extract.suffix}"
