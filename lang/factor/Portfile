# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                factor
version             0.99
revision            0
categories          lang devel
license             BSD
maintainers         {ciserlohn @ci42} openmaintainer

description         A practical stack language

long_description    The Factor programming language combines powerful language \
                    features with a full-featured library. The implementation \
                    is fully compiled for performance, while still supporting \
                    interactive development. Factor applications are portable \
                    between all common platforms. Factor can deploy stand- \
                    alone applications on all platforms.

homepage            https://www.factorcode.org

master_sites        https://downloads.factorcode.org/releases/${version}/
distname            ${name}-src-${version}
distfiles           ${distname}.zip
worksrcdir          ${name}

set main_dist       ${distname}.zip
checksums           ${main_dist} \
                    rmd160  3fb6b31a26438bba6a940d555599e41bc0710f16 \
                    sha256  f5626bb3119bd77de9ac3392fdbe188bffc26557fab3ea34f7ca21e372a8443e \
                    size    39687194

use_zip             yes

universal_variant   no

# PPC is not supported with upstream.
supported_archs     x86_64 ppc

use_configure       no

if {${build_arch} eq "x86_64"} {
    build.target    macosx-x86-64
    set boot_image  boot.unix-x86.64.image

} elseif {${build_arch} eq "i386"} {
    build.target    macosx-x86-32
    set boot_image  boot.unix-x86.32.image
    
} elseif {${build_arch} in [list ppc ppc64]} {
    # Existing dist lacks ppc boot image.
    set boot_version    0.93
    set boot_ppc_dist   ${name}-src-${boot_version}.zip
    master_sites-append http://downloads.factorcode.org/releases/${boot_version}/
    distfiles-append    ${boot_ppc_dist}
    checksums-append    ${boot_ppc_dist} \
                        rmd160  bf77e58f10af90020c78687aec1ab6e1e798f031 \
                        sha256  3b0046417da82258a90a19781603f236298236e965ed2fa3c0f7ec6167331c96 \
                        size    16040370

    extract.only        ${main_dist}
    post-extract {
        system -W ${workpath} "mkdir -p ${worksrcpath}/${name}-${boot_version}"
        system -W ${distpath} "cp ${distpath}/${boot_ppc_dist} ${worksrcpath}/${name}-${boot_version}"
        system -W ${workpath} "unzip -q ${worksrcpath}/${name}-${boot_version}/${boot_ppc_dist} -d ${worksrcpath}/${name}-${boot_version}"
        system -W ${workpath} "mv ${worksrcpath}/${name}-${boot_version}/${name}/boot.macosx-ppc.image ${worksrcpath}"
    }
    patchfiles-append   0001-GNUmakefile-for-ppc.patch \
                        0002-cpu-ppc.mac.S.patch \
                        0003-os-macosx-ppc.32.hpp.patch \
                        0004-Config.macosx.ppc.patch \
                        0005-master.hpp-fix-ppc64-defines.patch \
                        0006-platform.hpp-add-powerpc-darwin-targets.patch

    if {${os.major} == 9 && ${build_arch} eq "ppc64"} {
        # This is untested.
        build.target    macosx-ppc-64
    } else {
        build.target    macosx-ppc-32
    }
    set boot_image      boot.macosx-ppc.image
}

compiler.cxx_standard   2011

if {${os.platform} eq "darwin" && ${os.major} < 11} {
    depends_build-append \
                    port:gmake
    build.cmd       ${prefix}/bin/gmake
}

build.args-append   CC=${configure.cc} \
                    CXX=${configure.cxx} \
                    SITE_CFLAGS="${configure.cflags} ${configure.cc_archflags}"

platform darwin powerpc {
    build.args-append \
                    SITE_CXXFLAGS="${configure.cxxflags} ${configure.cxx_archflags} -force_cpusubtype_ALL"
}

post-build {
    system "cd ${worksrcpath} && ./factor -i=./${boot_image}"
}

destroot {
    set factor_dir ${destroot}${applications_dir}/Factor-${version}
    xinstall -d ${factor_dir}
    foreach f {Factor.app factor.image basis core \
               extra misc README.md license.txt} {
        copy ${worksrcpath}/$f ${factor_dir}
    }
    copy ${worksrcpath}/libfactor.dylib ${destroot}${prefix}/lib

    xinstall -d ${destroot}${prefix}/share/vim
    copy ${factor_dir}/misc/vim ${destroot}${prefix}/share/vim/vimfiles
}

livecheck.type      regex
livecheck.url       ${homepage}
livecheck.regex     ${name}-src-(\\d+\\.\\d+)${extract.suffix}
