From 3e49ac98630e8f819f661b4db67951b8c3480ebf Mon Sep 17 00:00:00 2001
From: barracuda156 <vital.had@gmail.com>
Date: Sun, 14 Jan 2024 05:58:21 +0800
Subject: [PATCH 03/10] dom/bindings/BindingUtils.h: fix for gcc

---
 dom/bindings/BindingUtils.h | 15 ++++++++-------
 1 file changed, 8 insertions(+), 7 deletions(-)

diff --git dom/bindings/BindingUtils.h dom/bindings/BindingUtils.h
index 2d8c27f910..ed1d399363 100644
--- dom/bindings/BindingUtils.h
+++ dom/bindings/BindingUtils.h
@@ -1779,11 +1779,12 @@ GetCallbackFromCallbackObject(T& aObj)
   return GetCallbackFromCallbackObjectHelper<T>::Get(aObj);
 }
 
+// id is a reserved word for gcc.
 static inline bool
-AtomizeAndPinJSString(JSContext* cx, jsid& id, const char* chars)
+AtomizeAndPinJSString(JSContext* cx, jsid& jid, const char* chars)
 {
   if (JSString *str = ::JS_AtomizeAndPinString(cx, chars)) {
-    id = INTERNED_STRING_TO_JSID(cx, str);
+    jid = INTERNED_STRING_TO_JSID(cx, str);
     return true;
   }
   return false;
@@ -3105,26 +3106,26 @@ CreateGlobal(JSContext* aCx, T* aNative, nsWrapperCache* aCache,
  */
 class PinnedStringId
 {
-  jsid id;
+  jsid jid;
 
  public:
-  PinnedStringId() : id(JSID_VOID) {}
+  PinnedStringId() : jid(JSID_VOID) {}
 
   bool init(JSContext *cx, const char *string) {
     JSString* str = JS_AtomizeAndPinString(cx, string);
     if (!str)
       return false;
-    id = INTERNED_STRING_TO_JSID(cx, str);
+    jid = INTERNED_STRING_TO_JSID(cx, str);
     return true;
   }
 
   operator const jsid& () {
-    return id;
+    return jid;
   }
 
   operator JS::Handle<jsid> () {
     /* This is safe because we have pinned the string. */
-    return JS::Handle<jsid>::fromMarkedLocation(&id);
+    return JS::Handle<jsid>::fromMarkedLocation(&jid);
   }
 };
 
-- 
2.43.0

