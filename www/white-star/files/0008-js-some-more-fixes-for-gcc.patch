From 16778ff6d40498cea7233dd4d05b729c9bca646c Mon Sep 17 00:00:00 2001
From: barracuda156 <vital.had@gmail.com>
Date: Sun, 14 Jan 2024 07:14:51 +0800
Subject: [PATCH 08/10] js: some more fixes for gcc

---
 dom/base/nsJSUtils.h |  4 ++--
 js/src/jsapi.h       |  6 +++---
 js/src/jsfriendapi.h | 46 ++++++++++++++++++++++----------------------
 3 files changed, 28 insertions(+), 28 deletions(-)

diff --git dom/base/nsJSUtils.h dom/base/nsJSUtils.h
index c0fc22d617..b662aef292 100644
--- dom/base/nsJSUtils.h
+++ dom/base/nsJSUtils.h
@@ -205,10 +205,10 @@ public:
     return str && init(aContext, str);
   }
 
-  bool init(JSContext* aContext, jsid id)
+  bool init(JSContext* aContext, jsid jid)
   {
     JS::Rooted<JS::Value> v(aContext);
-    return JS_IdToValue(aContext, id, &v) && init(aContext, v);
+    return JS_IdToValue(aContext, jid, &v) && init(aContext, v);
   }
 
   bool init(const JS::Value &v);
diff --git js/src/jsapi.h js/src/jsapi.h
index d36a4d165b..04c943c91a 100644
--- js/src/jsapi.h
+++ js/src/jsapi.h
@@ -4494,10 +4494,10 @@ extern JS_PUBLIC_API(const char16_t*)
 JS_GetTwoByteFlatStringChars(const JS::AutoCheckCannotGC& nogc, JSFlatString* str);
 
 static MOZ_ALWAYS_INLINE JSFlatString*
-JSID_TO_FLAT_STRING(jsid id)
+JSID_TO_FLAT_STRING(jsid jid)
 {
-    MOZ_ASSERT(JSID_IS_STRING(id));
-    return (JSFlatString*)(JSID_BITS(id));
+    MOZ_ASSERT(JSID_IS_STRING(jid));
+    return (JSFlatString*)(JSID_BITS(jid));
 }
 
 static MOZ_ALWAYS_INLINE JSFlatString*
diff --git js/src/jsfriendapi.h js/src/jsfriendapi.h
index 325c32b80a..eba202a00b 100644
--- js/src/jsfriendapi.h
+++ js/src/jsfriendapi.h
@@ -220,7 +220,7 @@ extern JS_FRIEND_API(void)
 DumpValue(const JS::Value& val);
 
 extern JS_FRIEND_API(void)
-DumpId(jsid id);
+DumpId(jsid jid);
 
 extern JS_FRIEND_API(void)
 DumpInterpreterFrame(JSContext* cx, InterpreterFrame* start = nullptr);
@@ -723,7 +723,7 @@ NewFunctionWithReserved(JSContext* cx, JSNative call, unsigned nargs, unsigned f
 
 JS_FRIEND_API(JSFunction*)
 NewFunctionByIdWithReserved(JSContext* cx, JSNative native, unsigned nargs, unsigned flags,
-                            jsid id);
+                            jsid jid);
 
 JS_FRIEND_API(const JS::Value&)
 GetFunctionNativeReserved(JSObject* fun, size_t which);
@@ -2513,14 +2513,14 @@ SET_JITINFO(JSFunction * func, const JSJitInfo* info)
 static MOZ_ALWAYS_INLINE jsid
 JSID_FROM_BITS(size_t bits)
 {
-    jsid id;
-    JSID_BITS(id) = bits;
-    return id;
+    jsid jid;
+    JSID_BITS(jid) = bits;
+    return jid;
 }
 
 namespace js {
 namespace detail {
-bool IdMatchesAtom(jsid id, JSAtom* atom);
+bool IdMatchesAtom(jsid jid, JSAtom* atom);
 } // namespace detail
 } // namespace js
 
@@ -2549,28 +2549,28 @@ static MOZ_ALWAYS_INLINE jsid
 NON_INTEGER_ATOM_TO_JSID(JSAtom* atom)
 {
     MOZ_ASSERT(((size_t)atom & 0x7) == 0);
-    jsid id = JSID_FROM_BITS((size_t)atom);
-    MOZ_ASSERT(js::detail::IdMatchesAtom(id, atom));
-    return id;
+    jsid jid = JSID_FROM_BITS((size_t)atom);
+    MOZ_ASSERT(js::detail::IdMatchesAtom(jid, atom));
+    return jid;
 }
 
 /* All strings stored in jsids are atomized, but are not necessarily property names. */
 static MOZ_ALWAYS_INLINE bool
-JSID_IS_ATOM(jsid id)
+JSID_IS_ATOM(jsid jid)
 {
-    return JSID_IS_STRING(id);
+    return JSID_IS_STRING(jid);
 }
 
 static MOZ_ALWAYS_INLINE bool
-JSID_IS_ATOM(jsid id, JSAtom* atom)
+JSID_IS_ATOM(jsid jid, JSAtom* atom)
 {
-    return id == JSID_FROM_BITS((size_t)atom);
+    return jid == JSID_FROM_BITS((size_t)atom);
 }
 
 static MOZ_ALWAYS_INLINE JSAtom*
-JSID_TO_ATOM(jsid id)
+JSID_TO_ATOM(jsid jid)
 {
-    return (JSAtom*)JSID_TO_STRING(id);
+    return (JSAtom*)JSID_TO_STRING(jid);
 }
 
 JS_STATIC_ASSERT(sizeof(jsid) == sizeof(void*));
@@ -2578,15 +2578,15 @@ JS_STATIC_ASSERT(sizeof(jsid) == sizeof(void*));
 namespace js {
 
 static MOZ_ALWAYS_INLINE JS::Value
-IdToValue(jsid id)
+IdToValue(jsid jid)
 {
-    if (JSID_IS_STRING(id))
-        return JS::StringValue(JSID_TO_STRING(id));
-    if (JSID_IS_INT(id))
-        return JS::Int32Value(JSID_TO_INT(id));
-    if (JSID_IS_SYMBOL(id))
-        return JS::SymbolValue(JSID_TO_SYMBOL(id));
-    MOZ_ASSERT(JSID_IS_VOID(id));
+    if (JSID_IS_STRING(jid))
+        return JS::StringValue(JSID_TO_STRING(jid));
+    if (JSID_IS_INT(jid))
+        return JS::Int32Value(JSID_TO_INT(jid));
+    if (JSID_IS_SYMBOL(jid))
+        return JS::SymbolValue(JSID_TO_SYMBOL(jid));
+    MOZ_ASSERT(JSID_IS_VOID(jid));
     return JS::UndefinedValue();
 }
 
-- 
2.43.0

